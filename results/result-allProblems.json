{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Long vector paths",
  "severity": "High",
  "comment": "Very long vector path (1661 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector.",
  "detailsInfo": "Long vector paths  \n\nUsing long vector paths is bad for performance. There are several ways to make the `pathData` shorter:  \n\\* Using less precision  \n\\* Removing some minor details  \n\\* Using the Android Studio vector conversion tool  \n\\* Rasterizing the image (converting to PNG)  \n\nIssue id: VectorPath",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/drawable/ic_github.xml",
      "language": "XML",
      "line": 9,
      "offset": 27,
      "length": 1661,
      "code": {
        "startLine": 7,
        "length": 1661,
        "offset": 72,
        "surroundingCode": "    <path\n        android:fillColor=\"#000000\"\n        android:pathData=\"M511.97,73.15q119.42,0 220.29,58.85t159.71,159.71 58.85,220.29q0,143.42 -83.71,258.02t-216.29,158.56q-15.42,2.85 -22.85,-4t-7.42,-17.15q0,-1.73 0.29,-43.71t0.29,-76.86q0,-55.42 -29.73,-81.15 32.58,-3.42 58.56,-10.27t53.73,-22.27 46.27,-38.02 30.27,-60 11.71,-86.02q0,-68 -45.15,-117.73 21.15,-52 -4.58,-116.58 -16,-5.15 -46.27,6.27t-52.58,25.15l-21.73,13.73q-53.15,-14.85 -109.73,-14.85t-109.73,14.85q-9.15,-6.27 -24.29,-15.42t-47.71,-22.02 -48.58,-7.71q-25.73,64.58 -4.58,116.58 -45.15,49.73 -45.15,117.73 0,48.58 11.71,85.73t30.02,60 46.02,38.27 53.73,22.27 58.56,10.27q-22.27,20.58 -28,58.85 -12,5.73 -25.73,8.58t-32.58,2.85 -37.44,-12.29 -31.71,-35.71q-10.85,-18.27 -27.71,-29.73t-28.29,-13.73l-11.42,-1.73q-12,0 -16.58,2.56t-2.85,6.56 5.15,8 7.42,6.85l4,2.85q12.58,5.73 24.86,21.73t18.02,29.15l5.73,13.15q7.42,21.73 25.15,35.14t38.27,17.15 39.71,4 31.71,-2.02l13.15,-2.27q0,21.73 0.29,50.56t0.29,31.14q0,10.27 -7.42,17.15t-22.85,4q-132.58,-44 -216.29,-158.56t-83.71,-258.02q0,-119.42 58.85,-220.29t159.71,-159.71 220.29,-58.85zM239.39,703.42q1.73,-4 -4,-6.85 -5.73,-1.73 -7.42,1.15 -1.73,4 4,6.85 5.15,3.42 7.42,-1.15zM257.12,722.85q4,-2.85 -1.15,-9.15 -5.73,-5.15 -9.15,-1.73 -4,2.85 1.15,9.15 5.73,5.73 9.15,1.73zM274.27,748.58q5.15,-4 0,-10.85 -4.58,-7.42 -9.73,-3.42 -5.15,2.85 0,10.27t9.73,4zM298.27,772.58q4.58,-4.58 -2.27,-10.85 -6.85,-6.85 -11.42,-1.73 -5.15,4.58 2.27,10.85 6.85,6.85 11.42,1.73zM330.85,786.85q1.73,-6.27 -7.42,-9.15 -8.58,-2.27 -10.85,4t7.42,8.58q8.58,3.42 10.85,-3.42zM366.85,789.73q0,-7.42 -9.73,-6.27 -9.15,0 -9.15,6.27 0,7.42 9.73,6.27 9.15,0 9.15,-6.27zM399.97,784q-1.15,-6.27 -10.27,-5.15 -9.15,1.73 -8,8.58t10.27,4.58 8,-8z\" />\n</vector>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintVectorPath"
  },
  "hash": "cc0e21e696404c6e48c63af67870cf30eef4351bba6c89a81b87f36d4c6ec17d"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Long vector paths",
  "severity": "High",
  "comment": "Very long vector path (1833 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector.",
  "detailsInfo": "Long vector paths  \n\nUsing long vector paths is bad for performance. There are several ways to make the `pathData` shorter:  \n\\* Using less precision  \n\\* Removing some minor details  \n\\* Using the Android Studio vector conversion tool  \n\\* Rasterizing the image (converting to PNG)  \n\nIssue id: VectorPath",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/drawable/ic_grades.xml",
      "language": "XML",
      "line": 9,
      "offset": 27,
      "length": 1833,
      "code": {
        "startLine": 9,
        "length": 1833,
        "offset": 0,
        "surroundingCode": "M6.7,4.1V6h10.5V4.1h1.3c0.9,0 1.6,0.7 1.6,1.6l0,0v14.8c0,0.9 -0.7,1.6 -1.6,1.6c0,0 0,0 0,0H5.5c-0.9,0 -1.6,-0.7 -1.6,-1.6c0,0 0,0 0,0V5.7c0,-0.9 0.7,-1.6 1.6,-1.6h0L6.7,4.1L6.7,4.1zM16.7,15.5l-0.8,0.1v-0.1c-5.7,0.3 -8.8,1.9 -8.9,2c-0.1,0.1 -0.2,0.2 -0.2,0.4C6.8,17.9 6.9,18 7,18c0,0 0.1,0 0.1,0c0.2,0 0.4,-0.1 0.5,-0.1l0.1,0l0.1,-0.1l0,0c2.7,-0.9 5.5,-1.5 8.3,-1.8l0.5,-0.1L16.7,15.5L16.7,15.5zM8.4,10.7L8.4,10.7c-0.3,0 -0.5,0.2 -1.2,0.7l-0.1,0c-0.2,0.1 -0.3,0.3 -0.3,0.6c0,0.1 0,0.2 0.1,0.3L7,12.5h0.1c0.1,0 0.1,0 0.2,-0.1c-0.2,0.4 -0.5,0.9 -0.7,1.4c-0.2,0.5 -0.3,1 -0.4,1.5c0,0 0,0.1 0,0.1c0,0.3 0.3,0.5 0.6,0.6L7,16.1c0.1,0 0.2,0.1 0.2,0.1c0.1,0 0.3,-0.1 0.3,-0.2v-0.4c0.1,-0.6 0.3,-1.2 0.6,-1.8l0.3,-0.6C9,11.8 9,11.7 9,11.5c0,0 0,-0.1 0,-0.1c0,-0.2 -0.2,-0.4 -0.3,-0.6C8.6,10.8 8.5,10.7 8.4,10.7L8.4,10.7zM16,9.8L16,9.8c-1,0.3 -1.7,0.8 -2.2,1.6c-0.2,0.3 -0.4,0.6 -0.5,0.9c0,-0.2 0,-0.4 0,-0.5c0,-0.3 -0.1,-0.5 -0.3,-0.7c0,0 0,-0.1 0,-0.1c0,-0.2 -0.1,-0.3 -0.3,-0.4c-0.2,-0.2 -0.4,-0.2 -0.7,-0.2c-0.1,0 -0.2,0 -0.3,0.1h0l-0.1,0l-0.3,0.2l-0.1,0.1c-0.5,0.3 -0.9,0.7 -1.3,1.2c-0.5,0.7 -0.8,1.6 -0.8,2.5c0.1,0.6 0.5,1.3 1.2,1.3h0.2c1.1,-0.2 2,-1.1 2.4,-2.2c0,0.1 0,0.3 0,0.4c0.1,0.6 0.5,1.3 1.2,1.3h0.2l0,0c1.7,-0.3 2.9,-2.4 2.7,-4c0,-0.3 -0.1,-0.5 -0.3,-0.7c0,0 0,-0.1 0,-0.2C16.7,10 16.3,9.8 16,9.8L16,9.8zM11.9,11.3c0,0.1 0.1,0.1 0.1,0.2c-0.1,0.6 -0.3,1.2 -0.6,1.7L10.9,14l-0.1,0.1l-0.1,0.1l-0.1,0.1c-0.1,0.1 -0.2,0.1 -0.2,0.2c0,0 0,0 0.1,0l-0.2,0.1l0.2,-0.2c0,-0.1 0,-0.2 0,-0.3c0.1,-1 0.5,-1.8 1.1,-2.4h0.1c0.1,0 0.2,-0.1 0.2,-0.2C11.9,11.4 11.9,11.3 11.9,11.3L11.9,11.3zM15.7,10.9c0,0.1 0.1,0.1 0.1,0.2c-0.1,0.6 -0.3,1.2 -0.6,1.7l-0.5,0.8l-0.1,0.1l-0.1,0.1l-0.1,0.1c-0.1,0.1 -0.2,0.1 -0.2,0.2c0,0 0,0 0.1,0l-0.2,0.1l0.2,-0.2c0,-0.1 0,-0.2 0,-0.3c0.1,-1 0.5,-1.8 1.1,-2.4h0.1c0.1,0 0.2,-0.1 0.2,-0.2C15.7,11 15.7,10.9 15.7,10.9z"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintVectorPath"
  },
  "hash": "2f55f4755c771d7b948475d91a61e89aa9b04f8eb484c3c7b661d8c59bba5edb"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Long vector paths",
  "severity": "High",
  "comment": "Very long vector path (910 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector.",
  "detailsInfo": "Long vector paths  \n\nUsing long vector paths is bad for performance. There are several ways to make the `pathData` shorter:  \n\\* Using less precision  \n\\* Removing some minor details  \n\\* Using the Android Studio vector conversion tool  \n\\* Rasterizing the image (converting to PNG)  \n\nIssue id: VectorPath",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/drawable/ic_language.xml",
      "language": "XML",
      "line": 9,
      "offset": 27,
      "length": 910,
      "code": {
        "startLine": 7,
        "length": 910,
        "offset": 85,
        "surroundingCode": "    <path\n        android:fillColor=\"@android:color/white\"\n        android:pathData=\"M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM18.92,8h-2.95c-0.32,-1.25 -0.78,-2.45 -1.38,-3.56 1.84,0.63 3.37,1.91 4.33,3.56zM12,4.04c0.83,1.2 1.48,2.53 1.91,3.96h-3.82c0.43,-1.43 1.08,-2.76 1.91,-3.96zM4.26,14C4.1,13.36 4,12.69 4,12s0.1,-1.36 0.26,-2h3.38c-0.08,0.66 -0.14,1.32 -0.14,2s0.06,1.34 0.14,2L4.26,14zM5.08,16h2.95c0.32,1.25 0.78,2.45 1.38,3.56 -1.84,-0.63 -3.37,-1.9 -4.33,-3.56zM8.03,8L5.08,8c0.96,-1.66 2.49,-2.93 4.33,-3.56C8.81,5.55 8.35,6.75 8.03,8zM12,19.96c-0.83,-1.2 -1.48,-2.53 -1.91,-3.96h3.82c-0.43,1.43 -1.08,2.76 -1.91,3.96zM14.34,14L9.66,14c-0.09,-0.66 -0.16,-1.32 -0.16,-2s0.07,-1.35 0.16,-2h4.68c0.09,0.65 0.16,1.32 0.16,2s-0.07,1.34 -0.16,2zM14.59,19.56c0.6,-1.11 1.06,-2.31 1.38,-3.56h2.95c-0.96,1.65 -2.49,2.93 -4.33,3.56zM16.36,14c0.08,-0.66 0.14,-1.32 0.14,-2s-0.06,-1.34 -0.14,-2h3.38c0.16,0.64 0.26,1.31 0.26,2s-0.1,1.36 -0.26,2h-3.38z\" />\n</vector>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintVectorPath"
  },
  "hash": "3dcb9b2628b67c5d5ead28388f779a53865d76cb656eb52a603355d55d3c2fc2"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Long vector paths",
  "severity": "High",
  "comment": "Very long vector path (1457 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector.",
  "detailsInfo": "Long vector paths  \n\nUsing long vector paths is bad for performance. There are several ways to make the `pathData` shorter:  \n\\* Using less precision  \n\\* Removing some minor details  \n\\* Using the Android Studio vector conversion tool  \n\\* Rasterizing the image (converting to PNG)  \n\nIssue id: VectorPath",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/drawable/ic_sc_tool.xml",
      "language": "XML",
      "line": 13,
      "offset": 27,
      "length": 1457,
      "code": {
        "startLine": 11,
        "length": 1457,
        "offset": 97,
        "surroundingCode": "        android:fillColor=\"#231815\"\n        android:fillType=\"evenOdd\"\n        android:pathData=\"M76.7,48.2L76.7,48.2L76.7,48.2c0.2,-0.2 0.3,-0.2 0.4,-0.3l0,0c0.3,-0.3 0.5,-0.7 0.5,-1.1v-8.4H22.5v8.4c0,0.5 0.2,0.8 0.5,1.1l0,0c0.1,0.1 0.2,0.2 0.3,0.2c0,0 0.1,0 0.1,0.1c0.2,0.1 0.5,0.2 0.7,0.2h4.1v-3.1c0,-0.8 0.7,-1.4 1.4,-1.4h7.7c0.8,0 1.4,0.7 1.4,1.4v3.1h22.7v-3.1c0,-0.8 0.7,-1.4 1.4,-1.4h7.7c0.8,0 1.4,0.7 1.4,1.4v3.1h4.2C76.4,48.4 76.6,48.3 76.7,48.2L76.7,48.2L76.7,48.2zM42,35.5v-1.9h-3v1.9H42zM36.2,35.5v-3.3c0,-0.8 0.7,-1.4 1.4,-1.4h1.5v-1.8c0,-0.8 0.4,-1.6 0.9,-2.2l0,0c0.6,-0.6 1.3,-0.9 2.2,-0.9H58c0.8,0 1.7,0.4 2.2,0.9l0,0c0.6,0.6 0.9,1.3 0.9,2.2v1.8h1.5c0.8,0 1.4,0.7 1.4,1.4v3.3h15c0.8,0 1.4,0.7 1.4,1.4v9.8c0,1.2 -0.5,2.3 -1.3,3.1l0,0C79,49.9 79,49.9 78.9,50v19.7c0,1.2 -0.5,2.3 -1.3,3.1l0,0c-0.8,0.8 -1.9,1.3 -3.1,1.3h-49c-1.2,0 -2.3,-0.5 -3.1,-1.3l0,0c-0.8,-0.8 -1.3,-1.9 -1.3,-3.2V50C21,50 21,50 20.9,49.9l0,0c-0.8,-0.8 -1.3,-1.9 -1.3,-3.2v-9.8c0,-0.8 0.7,-1.4 1.4,-1.4H36.2L36.2,35.5zM42,30.8V29c0,-0.1 0,-0.1 0.1,-0.2l0,0c0,-0.1 0.1,-0.1 0.2,-0.1H58c0.1,0 0.1,0 0.2,0.1s0.1,0.1 0.1,0.2v1.8h-1.5c-0.8,0 -1.4,0.7 -1.4,1.4v3.3H44.9v-3.3c0,-0.8 -0.7,-1.4 -1.4,-1.4H42zM61.2,35.5v-1.9h-3v1.9H61.2zM61.4,51.2H38.7v5.3c0,0.8 -0.7,1.4 -1.4,1.4h-7.7c-0.8,0 -1.4,-0.7 -1.4,-1.4v-5.3H24v18.6c0,0.5 0.2,0.8 0.5,1.1l0,0c0.3,0.3 0.7,0.5 1.1,0.5h49c0.5,0 0.8,-0.2 1.1,-0.5l0,0c0.3,-0.3 0.5,-0.7 0.5,-1.1V51.2h-4.1v5.3c0,0.8 -0.7,1.4 -1.4,1.4H63c-0.8,0 -1.4,-0.7 -1.4,-1.4L61.4,51.2L61.4,51.2L61.4,51.2zM64.3,55v-8.4h4.9V55H64.3zM31,55v-8.4h4.9V55H31z\" />\n</vector>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintVectorPath"
  },
  "hash": "c084e608748e4742cabfdcdcc370e36db5da7a88ce12e93fe36e9152b0f27140"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'stu_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/tools/VolunteerUtils.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 9,
        "length": 6,
        "offset": 81,
        "surroundingCode": "    data class VolunteerDataClass(\n        val name: String? = null,\n        val stu_id: String? = null,\n    )\n}"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "6fe40e6f2470a5df1394ac14d72235464a3cd4a87e3f85ba9dac09aefb294db8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'order_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 45,
        "surroundingCode": "\ndata class OrderListInnerDataClass(\n    val order_id: String? = null,\n    val order_type: String? = null,\n    val space_name: String? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "e1e0d67bab061c3bc93e7c15499f47113636ce9d727f29a3991f9a4b945a92e1"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'order_type' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 8,
        "length": 10,
        "offset": 78,
        "surroundingCode": "data class OrderListInnerDataClass(\n    val order_id: String? = null,\n    val order_type: String? = null,\n    val space_name: String? = null,\n    val seat_label: Any? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "2ebc168b98178016ab6b20e9b500a759e8f763357a46785eebed536819dcdb2f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'space_name' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 9,
        "length": 10,
        "offset": 78,
        "surroundingCode": "    val order_id: String? = null,\n    val order_type: String? = null,\n    val space_name: String? = null,\n    val seat_label: Any? = null,\n    val all_users: Any? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "c1c600a6770dc407dcb956cb6e5687b753d64a300b5fbbbd862e429f485e9611"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'seat_label' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 10,
        "length": 10,
        "offset": 80,
        "surroundingCode": "    val order_type: String? = null,\n    val space_name: String? = null,\n    val seat_label: Any? = null,\n    val all_users: Any? = null,\n    val order_start_time: String? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "49556bfeba406641a2b253871434d013feb3f157753bea9e9a5a701f62d4d772"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'all_users' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 11,
        "length": 9,
        "offset": 77,
        "surroundingCode": "    val space_name: String? = null,\n    val seat_label: Any? = null,\n    val all_users: Any? = null,\n    val order_start_time: String? = null,\n    val order_date: String? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "eec23c03aaa4fd37726197649d2a1f12297eccd7235481f29f9c3f920fd0df4a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'order_start_time' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 12,
        "length": 16,
        "offset": 73,
        "surroundingCode": "    val seat_label: Any? = null,\n    val all_users: Any? = null,\n    val order_start_time: String? = null,\n    val order_date: String? = null,\n    val back_time: String? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "89143ccf5532ac3e6f79a8ecb17281133d2f482698d1731b289cf74cc0ceee3e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'order_date' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 13,
        "length": 10,
        "offset": 82,
        "surroundingCode": "    val all_users: Any? = null,\n    val order_start_time: String? = null,\n    val order_date: String? = null,\n    val back_time: String? = null,\n    val order_end_time: String? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "9ea73d5a7f2e4a22299a61c90784f7df0020e4d865e63c8dbd15fef4e80ea672"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'back_time' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 14,
        "length": 9,
        "offset": 86,
        "surroundingCode": "    val order_start_time: String? = null,\n    val order_date: String? = null,\n    val back_time: String? = null,\n    val order_end_time: String? = null,\n    val order_process: String? = null,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "0430d3e99645309a3d33e97c3f4555f6698777f827d5e75e3ef07fe1cdb6c7f4"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'order_end_time' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 15,
        "length": 14,
        "offset": 79,
        "surroundingCode": "    val order_date: String? = null,\n    val back_time: String? = null,\n    val order_end_time: String? = null,\n    val order_process: String? = null,\n)"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "b17e4159e7e269dc2c92a56cc1f3f55a27378391851f7cc4d92935f8e0da339f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'order_process' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/OrderListDataClass.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 16,
        "length": 13,
        "offset": 83,
        "surroundingCode": "    val back_time: String? = null,\n    val order_end_time: String? = null,\n    val order_process: String? = null,\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "92adccd11e3073a9ad6f95c1ed1635fde37ffa7d153ecbcdcd56768f14ca9e9a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'dormitoryInfo_list' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/ElectricDataClass.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 3,
        "length": 18,
        "offset": 75,
        "surroundingCode": "@Suppress(\"SpellCheckingInspection\")\ndata class ElectricDataClass(\n    val dormitoryInfo_list: List<ElectricInnerDataClass>? = null,\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "a03564f09bda9337d0a4bc92734674e3bd45bbf18b8a38d7b581bb94d31a00c6"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'SSMC' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/ElectricDataClass.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 7,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\ndata class ElectricInnerDataClass(\n    val SSMC: String? = null,\n    val resele: String? = null,\n)"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "f91341933de4f00a63a945d0fa6d09b6cced45e2a4bc4edc6e94eca043bf2e54"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'avatar_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 39,
        "length": 10,
        "offset": 28,
        "surroundingCode": "\ndata class Author(\n    val avatar_url: String,\n    val events_url: String,\n    val followers_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "a3f7d6b130d6f09f9bb8285f5900f94358121823fa425033f32b1db617a5198e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'events_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 40,
        "length": 10,
        "offset": 55,
        "surroundingCode": "data class Author(\n    val avatar_url: String,\n    val events_url: String,\n    val followers_url: String,\n    val following_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "bf5eb686c1e38d3e5035388edc87859ac815d610104a4196daacecfba99a8570"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'followers_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 41,
        "length": 13,
        "offset": 64,
        "surroundingCode": "    val avatar_url: String,\n    val events_url: String,\n    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "4d8140c7295584ce4f65f50aca479bbfa41619f66db3bdb441a35be5298a3975"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'following_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 42,
        "length": 13,
        "offset": 67,
        "surroundingCode": "    val events_url: String,\n    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,\n    val gravatar_id: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "55d295a34ddcbee91d772477163d2b444bde48085f0e23795658a4f1496b1d6f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'gists_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 43,
        "length": 9,
        "offset": 70,
        "surroundingCode": "    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,\n    val gravatar_id: String,\n    val html_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "80cc9ffa1390285eb108a9e0dee18b9cc85be5ab874bd78dacbda2b9daa13652"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'gravatar_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 44,
        "length": 11,
        "offset": 66,
        "surroundingCode": "    val following_url: String,\n    val gists_url: String,\n    val gravatar_id: String,\n    val html_url: String,\n    val id: Int,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "c52577d68edf20fae4efa2095511a5e4791f466dd0ccd7fc0b3981843348aa18"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'html_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 45,
        "length": 8,
        "offset": 64,
        "surroundingCode": "    val gists_url: String,\n    val gravatar_id: String,\n    val html_url: String,\n    val id: Int,\n    val login: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "11f0e540100522d763d754aa6db70cbfd2d9ebef7586bd721d1cec01bf500e2f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'node_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 50,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 48,
        "length": 7,
        "offset": 48,
        "surroundingCode": "    val id: Int,\n    val login: String,\n    val node_id: String,\n    val organizations_url: String,\n    val received_events_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "9cb3b9fdf2116dcbb1ccda8612073b13281a007dc82e35b3f4a56ac1f9373c55"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'organizations_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 51,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 49,
        "length": 17,
        "offset": 56,
        "surroundingCode": "    val login: String,\n    val node_id: String,\n    val organizations_url: String,\n    val received_events_url: String,\n    val repos_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "d8c3ad37ca26c323372b471ee79d7aa0619540ded9f3d00d8d5537726d2331e2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'received_events_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 50,
        "length": 19,
        "offset": 68,
        "surroundingCode": "    val node_id: String,\n    val organizations_url: String,\n    val received_events_url: String,\n    val repos_url: String,\n    val site_admin: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "a26e238aa7104acd532cf85c938e9c7e2c7e7a07536f1aa63ba836146c6edd5f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'repos_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 51,
        "length": 9,
        "offset": 80,
        "surroundingCode": "    val organizations_url: String,\n    val received_events_url: String,\n    val repos_url: String,\n    val site_admin: Boolean,\n    val starred_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "648c321e592036f5c1ca4386e78a78bc45730457f07d0a2f05785bbda7beebaa"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'site_admin' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 72,
        "surroundingCode": "    val received_events_url: String,\n    val repos_url: String,\n    val site_admin: Boolean,\n    val starred_url: String,\n    val subscriptions_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "21bd1195009c2c17889b6037fa7d3afa8d680749e896b26f981f1531631b00be"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'starred_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 53,
        "length": 11,
        "offset": 64,
        "surroundingCode": "    val repos_url: String,\n    val site_admin: Boolean,\n    val starred_url: String,\n    val subscriptions_url: String,\n    val type: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "0407d1f67092ed2397390e95273a2b421b42d93ae031978bc8f823706133dc30"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'subscriptions_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 54,
        "length": 17,
        "offset": 66,
        "surroundingCode": "    val site_admin: Boolean,\n    val starred_url: String,\n    val subscriptions_url: String,\n    val type: String,\n    val url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "d7ed6c6db6a27357c818358c52704cd650738fde59e61c055519b5701f84797a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'browser_download_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 23,
        "length": 20,
        "offset": 27,
        "surroundingCode": "\ndata class Asset(\n    val browser_download_url: String,\n    val content_type: String,\n    val created_at: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "f4ed65da2942bd3547418335d91c2e19773957e8ec807d05317050b2dc763716"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'content_type' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 24,
        "length": 12,
        "offset": 64,
        "surroundingCode": "data class Asset(\n    val browser_download_url: String,\n    val content_type: String,\n    val created_at: String,\n    val download_count: Int,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "728f223ab9cf14c6bc885aa002b5ff74ceba1ba7071363def0359ab526feab03"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'created_at' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 25,
        "length": 10,
        "offset": 76,
        "surroundingCode": "    val browser_download_url: String,\n    val content_type: String,\n    val created_at: String,\n    val download_count: Int,\n    val id: Int,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "ae1af88d95d5f0205d13fb10d8b3377a72b018cc8a2af4e836f50a0940831421"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'download_count' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 26,
        "length": 14,
        "offset": 66,
        "surroundingCode": "    val content_type: String,\n    val created_at: String,\n    val download_count: Int,\n    val id: Int,\n    val label: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "d03d383f4f99abb7a409fe55df0dcb1acdde456ce12e773599fd316a92f5ac11"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'node_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 30,
        "length": 7,
        "offset": 53,
        "surroundingCode": "    val label: String,\n    val name: String,\n    val node_id: String,\n    val size: Int,\n    val state: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "d3e218c529177dc34e20c400def7cc4bc9347854b68172b42b93c502fc72b800"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'updated_at' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 33,
        "length": 10,
        "offset": 50,
        "surroundingCode": "    val size: Int,\n    val state: String,\n    val updated_at: String,\n    val uploader: Uploader,\n    val url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "28e12faf9e31d17da1465547613c5d87a182aaf1fcbd1e49452680fc1f865311"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'assets_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 3,
        "length": 10,
        "offset": 64,
        "surroundingCode": "data class GHAPIDataClass(\n    val assets: List<Asset>,\n    val assets_url: String,\n    val author: Author,\n    val body: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "55c955850c66a34f0c9b463c063006abb7d2f334844f83094f1d3bf59735ed22"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'created_at' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 6,
        "length": 10,
        "offset": 54,
        "surroundingCode": "    val author: Author,\n    val body: String,\n    val created_at: String,\n    val draft: Boolean,\n    val html_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "8759b59560af45ac4fc3fad74e5342e73e2ce749e29e7b9175fa8e18103c63b8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'html_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 8,
        "length": 8,
        "offset": 60,
        "surroundingCode": "    val created_at: String,\n    val draft: Boolean,\n    val html_url: String,\n    val id: Int,\n    val name: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "e4a68867659cd0a3578230f6427e1df91b057ab224fda29bffa650bad4ed8c48"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'node_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 47,
        "surroundingCode": "    val id: Int,\n    val name: String,\n    val node_id: String,\n    val prerelease: Boolean,\n    val published_at: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "17e20ddfae6f3f8c4f5887fc1e5f5c11e448e61fa9be7950f7015b6cbe3a1827"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'published_at' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 13,
        "length": 12,
        "offset": 62,
        "surroundingCode": "    val node_id: String,\n    val prerelease: Boolean,\n    val published_at: String,\n    val tag_name: String,\n    val tarball_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "8d971ed9fcbfe1df80aa266fee4099810d7d366525381bbd191436d3b32c7d07"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'tag_name' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 14,
        "length": 8,
        "offset": 67,
        "surroundingCode": "    val prerelease: Boolean,\n    val published_at: String,\n    val tag_name: String,\n    val tarball_url: String,\n    val target_commitish: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "84fdeb476dec80f39e58d355e26777d4fdb385195266b5a358615e226fda02bb"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'tarball_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 15,
        "length": 11,
        "offset": 64,
        "surroundingCode": "    val published_at: String,\n    val tag_name: String,\n    val tarball_url: String,\n    val target_commitish: String,\n    val upload_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "e159c890257d111a674e6ed4727ea06da506f2e39c4dc18d296430f2bba11796"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'target_commitish' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 16,
        "length": 16,
        "offset": 63,
        "surroundingCode": "    val tag_name: String,\n    val tarball_url: String,\n    val target_commitish: String,\n    val upload_url: String,\n    val url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "33b3af793a667d6a3bbf96e1a87cc003603aeac2cdbf6910f78054bf6540d626"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'upload_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 17,
        "length": 10,
        "offset": 71,
        "surroundingCode": "    val tarball_url: String,\n    val target_commitish: String,\n    val upload_url: String,\n    val url: String,\n    val zipball_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "987ccb75d641468f04949f0e59c56203c8c77ddbdce6d1746040cc00eba6b5c2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'zipball_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 19,
        "length": 11,
        "offset": 57,
        "surroundingCode": "    val upload_url: String,\n    val url: String,\n    val zipball_url: String,\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "56160765483e1183cf6bb39afce15d0fadb28db88a7c69177483bd3b6460b96f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'avatar_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 60,
        "length": 10,
        "offset": 30,
        "surroundingCode": "\ndata class Uploader(\n    val avatar_url: String,\n    val events_url: String,\n    val followers_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "9cbe14056c75cc176fe54a24683c67ed21bdc59f8235eb655d855811d903983f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'events_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 61,
        "length": 10,
        "offset": 57,
        "surroundingCode": "data class Uploader(\n    val avatar_url: String,\n    val events_url: String,\n    val followers_url: String,\n    val following_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "da02859beebfac22d5c5d0a02cfe59d0f6c82bca50e993a6b3b8e5860edfda1c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'followers_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 62,
        "length": 13,
        "offset": 64,
        "surroundingCode": "    val avatar_url: String,\n    val events_url: String,\n    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "f9c8982ba15f71c644e3669d65ffd8fb4dfe28ef0940489f045d379569c923d8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'following_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 65,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 63,
        "length": 13,
        "offset": 67,
        "surroundingCode": "    val events_url: String,\n    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,\n    val gravatar_id: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "01af256c3e0a819530848eba63b1da8ce049fb7a5b4e908f27d972b430cacd28"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'gists_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 64,
        "length": 9,
        "offset": 70,
        "surroundingCode": "    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,\n    val gravatar_id: String,\n    val html_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "c0145a299ac5e7458ab4318156275b8b6e7cccd4671213116ba224db99bf5350"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'gravatar_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 65,
        "length": 11,
        "offset": 66,
        "surroundingCode": "    val following_url: String,\n    val gists_url: String,\n    val gravatar_id: String,\n    val html_url: String,\n    val id: Int,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "84abca6f2649bd71de48b7a0bf3dbc46de8ab6603306ec4dfa82d3d34b2a6a12"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'html_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 66,
        "length": 8,
        "offset": 64,
        "surroundingCode": "    val gists_url: String,\n    val gravatar_id: String,\n    val html_url: String,\n    val id: Int,\n    val login: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "e934625a6c3d80ec4c17cd69f3bca7978d9ae69006d501f64065724b8bfa43e2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'node_id' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 69,
        "length": 7,
        "offset": 48,
        "surroundingCode": "    val id: Int,\n    val login: String,\n    val node_id: String,\n    val organizations_url: String,\n    val received_events_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "2c46ed4de5be4561c5580c43d1422bb28ba025f53a2c5a95dbaf86c73384d458"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'organizations_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 72,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 70,
        "length": 17,
        "offset": 56,
        "surroundingCode": "    val login: String,\n    val node_id: String,\n    val organizations_url: String,\n    val received_events_url: String,\n    val repos_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "99c145645f5242d6371214f659e1c6c988ca5c58da382a8cc99901c9c3e3adc3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'received_events_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 73,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 71,
        "length": 19,
        "offset": 68,
        "surroundingCode": "    val node_id: String,\n    val organizations_url: String,\n    val received_events_url: String,\n    val repos_url: String,\n    val site_admin: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "cc361c6bb8bb026f8c39e0af2f1b794f5fde03c3b2b02f5b9a5a003dbcb4cf30"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'repos_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 72,
        "length": 9,
        "offset": 80,
        "surroundingCode": "    val organizations_url: String,\n    val received_events_url: String,\n    val repos_url: String,\n    val site_admin: Boolean,\n    val starred_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "b975506c8586a9c4d5c1dedf442d3c49c7da8755c612600925a058df2dbfbb93"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'site_admin' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 73,
        "length": 10,
        "offset": 72,
        "surroundingCode": "    val received_events_url: String,\n    val repos_url: String,\n    val site_admin: Boolean,\n    val starred_url: String,\n    val subscriptions_url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "df76ef3b350796f529e4bb941fae502cd47bc694d4d19affefab8b71fb54237f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'starred_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 74,
        "length": 11,
        "offset": 64,
        "surroundingCode": "    val repos_url: String,\n    val site_admin: Boolean,\n    val starred_url: String,\n    val subscriptions_url: String,\n    val type: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "b926059a860f51ee8b07fee9c929d577f2caa95df7451adc7fd0ec3cdbe24679"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'subscriptions_url' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/data/model/GHAPIDataClass.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 75,
        "length": 17,
        "offset": 66,
        "surroundingCode": "    val site_admin: Boolean,\n    val starred_url: String,\n    val subscriptions_url: String,\n    val type: String,\n    val url: String,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "d377e3ccaf9714f873bd78554a0302f25a20d106e7c8fdb0467ab7742c36ff88"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Correctness",
  "type": "Obsolete Gradle Dependency",
  "severity": "High",
  "comment": "A newer version of androidx.appcompat:appcompat than 1.6.0-rc01 is available: 1.7.0-alpha01",
  "detailsInfo": "Obsolete Gradle Dependency  \n\nThis detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find.  \n\nIssue id: GradleDependency",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 83,
      "offset": 21,
      "length": 39,
      "code": {
        "startLine": 81,
        "length": 39,
        "offset": 138,
        "surroundingCode": "    implementation(\"androidx.activity:activity-ktx:1.6.1\")\n    implementation(\"androidx.annotation:annotation:1.5.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.0-rc01\")\n    implementation(\"androidx.browser:browser:1.4.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app",
    "inspectionName": "AndroidLintGradleDependency"
  },
  "hash": "0e438006dc9d10e6fa55f55b87cf01c64c8e54034348e4304432ce21e6b53be3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Obsolete SDK_INT Version Check",
  "severity": "High",
  "comment": "This folder configuration ('v26') is unnecessary; 'minSdkVersion' is 29. Merge all the resources in this folder into 'mipmap-anydpi'.",
  "detailsInfo": "Obsolete SDK_INT Version Check  \n\nThis check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.  \n\nSimilarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder.  \n\nIssue id: ObsoleteSdkInt",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/mipmap-anydpi-v26",
      "language": "",
      "line": 0,
      "offset": 0,
      "length": 0,
      "code": {
        "startLine": 0,
        "length": 0,
        "offset": 0,
        "surroundingCode": ""
      }
    }
  ],
  "attributes": {
    "module": "",
    "inspectionName": "AndroidLintObsoleteSdkInt"
  },
  "hash": "4db9ca17836c92175bc38fbe78c181e4f106b603e78c688bcda75730e2a955ed"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'space_name' should not contain underscores",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/library/ReserveUtils.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 4,
        "length": 10,
        "offset": 48,
        "surroundingCode": "\nobject ReserveUtils {\n    fun getResetRoomCode(space_name: String): Int {\n        val area = space_name.split(\"图书馆\")[0]\n        val room = space_name.split(\"图书馆\")[1].split(\"阅\")[0]"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "LocalVariableName"
  },
  "hash": "2df87b1dffb444696dc042504196ed75287ba388ebe8787972a2c583e9385c60"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'seat_id' should not contain underscores",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/library/ReserveUtils.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 33,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 129,
        "surroundingCode": "    fun constructPara(room: Int) = \"room_id=$room&order_date=${TimeUtils.getToday(\"/\", false)}\"\n\n    fun constructParaForAddCode(seat_id: String) =\n        \"seat_id=$seat_id&order_date=${TimeUtils.getToday(\"/\", false)}\"\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "LocalVariableName"
  },
  "hash": "f7bf9f01b098be1ff115319125f2f0db5a894467a7decf280d57d86ee14d736a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'FORM' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/web/Requests.kt",
      "language": "kotlin",
      "line": 160,
      "offset": 46,
      "length": 4,
      "code": {
        "startLine": 158,
        "length": 4,
        "offset": 52,
        "surroundingCode": "    }\n\n    fun postVCard(url: String, form: String, FORM: MediaType): String {\n        if (!AppUtils.hasNetwork()) {\n            return Constants.NET_DISCONNECTED"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "LocalVariableName"
  },
  "hash": "888519b62c07acff3cbd4a843267736b2a692c1ebe127364113d584050b62006"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'FORM' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/web/Requests.kt",
      "language": "kotlin",
      "line": 120,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 118,
        "length": 4,
        "offset": 51,
        "surroundingCode": "        url: String,\n        form: String,\n        FORM: MediaType,\n        textView: TextView? = null,\n        getUrl: Boolean = false,"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "LocalVariableName"
  },
  "hash": "05a205bfe13a14e60f06e6d32cf8f83b3c4894ec91aad764924dbb71d012b029"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'GP' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/tools/GradesUtils.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 28,
      "length": 2,
      "code": {
        "startLine": 16,
        "length": 2,
        "offset": 34,
        "surroundingCode": "    }\n\n    fun calculateAverageGP(GP: MutableList<Double>, credits: MutableList<Double>): Double {\n        var totalWeightedGP = 0.0\n        val totalCredits = credits.sum()"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "LocalVariableName"
  },
  "hash": "2152a5dc9b13e48eef3f35e30b1413e026e026c0ce1336d5c4468f19f631277c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/extensions/AnyExtensions.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 18,
        "length": 4,
        "offset": 36,
        "surroundingCode": "     * @return Unit\n     */\n    fun Any?.throwData() = AppUtils.pass()\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "b1cf2b286f8d0f3d32a7fab1be12c820d779ab8b717cce081fa17a9b00c1ed91"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Overdraw: Painting regions more than once",
  "severity": "High",
  "comment": "Possible overdraw: Root element paints background '@color/simple_page_background' with a theme that also paints a background (inferred theme is '@style/AppTheme')",
  "detailsInfo": "Overdraw: Painting regions more than once  \n\nIf you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called \"overdraw\".  \n\nNOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it's currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.  \n\nIf you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.  \n\nOf course it's possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.  \n\nIssue id: Overdraw",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/layout/simplepage_activity.xml",
      "language": "XML",
      "line": 5,
      "offset": 5,
      "length": 50,
      "code": {
        "startLine": 3,
        "length": 50,
        "offset": 85,
        "surroundingCode": "    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/simple_page_background\">\n\n    <com.google.android.material.appbar.AppBarLayout"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintOverdraw"
  },
  "hash": "703754446dc162fa942000950ad099a9cbf52138b7e8951fce9c66eb2cc45c2f"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Correctness",
  "type": "App Bundle handling of runtime locale changes",
  "severity": "High",
  "comment": "Found dynamic locale changes, but did not find corresponding Play Core library calls for downloading languages and splitting by language is not disabled in the 'bundle' configuration",
  "detailsInfo": "App Bundle handling of runtime locale changes  \n\nWhen changing locales at runtime (e.g. to provide an in-app language switcher), the Android App Bundle must be configured to not split by locale or the Play Core library must be used to download additional locales at runtime.  \n\nIssue id: AppBundleLocaleChanges  \n\n<https://developer.android.com/guide/app-bundle/configure-base#handling_language_changes>",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/AppUtils.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 13,
      "length": 33,
      "code": {
        "startLine": 86,
        "length": 33,
        "offset": 120,
        "surroundingCode": "    fun getResString(@StringRes resId: Int): String {\n        val conf = ctx.resources.configuration.also {\n            it.setLocale(GlobalValues.locale)\n        }\n        return ctx.createConfigurationContext(conf).getString(resId)"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintAppBundleLocaleChanges"
  },
  "hash": "5d6ecb10cb43b357f4c002a9f6528b0e4b5bd00515d3bd6323e05aeafcf8fe7d"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.drawable.bg_fs_dialog' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/drawable/bg_fs_dialog.xml",
      "language": "XML",
      "line": 2,
      "offset": 1,
      "length": 378,
      "code": {
        "startLine": 1,
        "length": 378,
        "offset": 39,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\">\n\n    <solid android:color=\"#DFDFDF\" />\n\n    <corners\n        android:bottomLeftRadius=\"@dimen/toast_radius\"\n        android:bottomRightRadius=\"@dimen/toast_radius\"\n        android:topLeftRadius=\"@dimen/toast_radius\"\n        android:topRightRadius=\"@dimen/toast_radius\" />\n\n</shape>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "7fcfa9b1134f0e82f00a66bfc41972336f47aa8c88655aeab7170267d312781e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.drawable.bg_fs_dialog' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/drawable-night/bg_fs_dialog.xml",
      "language": "XML",
      "line": 2,
      "offset": 1,
      "length": 378,
      "code": {
        "startLine": 1,
        "length": 378,
        "offset": 39,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\">\n\n    <solid android:color=\"#202020\" />\n\n    <corners\n        android:bottomLeftRadius=\"@dimen/toast_radius\"\n        android:bottomRightRadius=\"@dimen/toast_radius\"\n        android:topLeftRadius=\"@dimen/toast_radius\"\n        android:topRightRadius=\"@dimen/toast_radius\" />\n\n</shape>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "14de661aaf08b1cdb162e0190004742015968ecb067e4adf0e80b4432f74b03e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.layout.fragment_detail' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/layout/fragment_detail.xml",
      "language": "XML",
      "line": 2,
      "offset": 1,
      "length": 6506,
      "code": {
        "startLine": 2,
        "length": 6506,
        "offset": 0,
        "surroundingCode": "<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.fragment.library.DetailFragment\">\n\n    <TextView\n        android:id=\"@+id/detail_detail\"\n        android:layout_width=\"350dp\"\n        android:layout_height=\"160dp\"\n        android:layout_marginTop=\"90dp\"\n        android:gravity=\"center_horizontal|center_vertical\"\n        android:text=\"@string/loading\"\n        android:textSize=\"16sp\"\n        android:visibility=\"invisible\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.658\" />\n\n    <Button\n        android:id=\"@+id/detail_leave\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:backgroundTint=\"#FF0606\"\n        android:text=\"@string/leave\"\n        android:visibility=\"visible\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.499\" />\n\n    <Button\n        android:id=\"@+id/detail_temp\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"250dp\"\n        android:backgroundTint=\"#F8DF00\"\n        android:text=\"@string/temp\"\n        android:visibility=\"visible\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toEndOf=\"@+id/detail_leave\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.499\" />\n\n    <ImageView\n        android:id=\"@+id/detail_qr\"\n        android:layout_width=\"200dp\"\n        android:layout_height=\"200dp\"\n        android:layout_marginBottom=\"130dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/detail_detail\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        tools:ignore=\"ContentDescription,MissingConstraints\" />\n\n    <Button\n        android:id=\"@+id/detail_enter\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"250dp\"\n        android:backgroundTint=\"#40D646\"\n        android:text=\"@string/enter\"\n        android:visibility=\"visible\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <Button\n        android:id=\"@+id/detail_refresh\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"25dp\"\n        android:text=\"@string/refresh\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/detail_detail\" />\n\n    <Button\n        android:id=\"@+id/detail_cancel\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"25dp\"\n        android:clickable=\"false\"\n        android:text=\"@string/cancel\"\n        android:visibility=\"invisible\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/detail_refresh\"\n        app:layout_constraintStart_toEndOf=\"@+id/detail_refresh\"\n        app:layout_constraintTop_toTopOf=\"@+id/detail_refresh\" />\n\n    <Button\n        android:id=\"@+id/detail_new\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"25dp\"\n        android:clickable=\"false\"\n        android:text=\"@string/reserve\"\n        android:visibility=\"invisible\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/detail_refresh\"\n        app:layout_constraintEnd_toStartOf=\"@+id/detail_refresh\"\n        app:layout_constraintTop_toTopOf=\"@+id/detail_refresh\" />\n\n    <Button\n        android:id=\"@+id/detail_reset\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"25dp\"\n        android:clickable=\"false\"\n        android:text=\"@string/reset\"\n        android:visibility=\"invisible\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/detail_refresh\"\n        app:layout_constraintEnd_toStartOf=\"@+id/detail_refresh\"\n        app:layout_constraintTop_toTopOf=\"@+id/detail_refresh\" />\n\n    <Button\n        android:id=\"@+id/detail_temp_reset\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"25dp\"\n        android:clickable=\"false\"\n        android:text=\"@string/reset\"\n        android:visibility=\"invisible\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/detail_refresh\"\n        app:layout_constraintEnd_toStartOf=\"@+id/detail_refresh\"\n        app:layout_constraintTop_toTopOf=\"@+id/detail_refresh\" />\n\n    <ProgressBar\n        android:id=\"@+id/detail_loading\"\n        style=\"?android:attr/progressBarStyle\"\n        android:layout_width=\"56dp\"\n        android:layout_height=\"56dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/detail_qr\"\n        app:layout_constraintEnd_toEndOf=\"@+id/detail_qr\"\n        app:layout_constraintStart_toStartOf=\"@+id/detail_qr\"\n        app:layout_constraintTop_toTopOf=\"@+id/detail_qr\" />\n\n    <TextView\n        android:id=\"@+id/detail_type\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toTopOf=\"@+id/detail_leave\"\n        app:layout_constraintEnd_toEndOf=\"@+id/detail_qr\"\n        app:layout_constraintStart_toStartOf=\"@+id/detail_qr\"\n        app:layout_constraintTop_toBottomOf=\"@+id/detail_qr\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "3d5e4b8e1e8f05c6508c9e8d935d4d39bb874b88b5664add13c70544735a60c5"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.layout.fragment_fullscreen_dialog' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/layout/fragment_fullscreen_dialog.xml",
      "language": "XML",
      "line": 2,
      "offset": 1,
      "length": 2401,
      "code": {
        "startLine": 2,
        "length": 2401,
        "offset": 0,
        "surroundingCode": "<layout xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/common_transparent_20\">\n\n        <ImageView\n            android:id=\"@+id/pm_dialog\"\n            android:layout_width=\"350dp\"\n            android:layout_height=\"150dp\"\n            android:layout_marginTop=\"20dp\"\n            android:src=\"@drawable/bg_fs_dialog\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintHorizontal_bias=\"0.5\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            tools:ignore=\"ContentDescription\" />\n\n        <ImageView\n            android:id=\"@+id/pm_logo\"\n            android:layout_width=\"40dp\"\n            android:layout_height=\"40dp\"\n            android:layout_marginStart=\"5dp\"\n            android:layout_marginTop=\"5dp\"\n            android:src=\"@drawable/pic_splash\"\n            app:layout_constraintStart_toStartOf=\"@+id/pm_dialog\"\n            app:layout_constraintTop_toTopOf=\"@+id/pm_dialog\"\n            tools:ignore=\"ContentDescription\" />\n\n        <TextView\n            android:id=\"@+id/pm_slogan\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"40dp\"\n            android:layout_marginStart=\"10dp\"\n            android:gravity=\"center\"\n            android:text=\"@string/about_slogan\"\n            android:textColor=\"@color/fullscreen_text\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/pm_logo\"\n            app:layout_constraintStart_toEndOf=\"@+id/pm_logo\"\n            app:layout_constraintTop_toTopOf=\"@+id/pm_logo\" />\n\n        <TextView\n            android:id=\"@+id/pm_detail\"\n            android:layout_width=\"337dp\"\n            android:layout_height=\"75dp\"\n            android:layout_marginTop=\"10dp\"\n            android:textColor=\"@color/fullscreen_text\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintHorizontal_bias=\"0.5\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@+id/pm_logo\" />\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</layout>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "90bef53825d83a6047c6a5869010c30fc30f562d500d9ab650a96ca29b41f64b"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.layout.fragment_yanxiujian' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/layout/fragment_yanxiujian.xml",
      "language": "XML",
      "line": 2,
      "offset": 1,
      "length": 2309,
      "code": {
        "startLine": 2,
        "length": 2309,
        "offset": 0,
        "surroundingCode": "<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.fragment.library.YanxiujianFragment\">\n\n    <TextView\n        android:id=\"@+id/yxj_detail\"\n        android:layout_width=\"350dp\"\n        android:layout_height=\"160dp\"\n        android:layout_marginTop=\"90dp\"\n        android:gravity=\"center_horizontal|center_vertical\"\n        android:text=\"@string/loading\"\n        android:textSize=\"16sp\"\n        android:visibility=\"invisible\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.658\" />\n\n    <ImageView\n        android:id=\"@+id/yxj_qr\"\n        android:layout_width=\"200dp\"\n        android:layout_height=\"200dp\"\n        android:layout_marginBottom=\"130dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/yxj_detail\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        tools:ignore=\"ContentDescription,MissingConstraints\" />\n\n    <Button\n        android:id=\"@+id/yxj_refresh\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"25dp\"\n        android:text=\"@string/refresh\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/yxj_detail\" />\n\n    <ProgressBar\n        android:id=\"@+id/yxj_loading\"\n        style=\"?android:attr/progressBarStyle\"\n        android:layout_width=\"56dp\"\n        android:layout_height=\"56dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/yxj_qr\"\n        app:layout_constraintEnd_toEndOf=\"@+id/yxj_qr\"\n        app:layout_constraintStart_toStartOf=\"@+id/yxj_qr\"\n        app:layout_constraintTop_toTopOf=\"@+id/yxj_qr\" />\n</androidx.constraintlayout.widget.ConstraintLayout>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c35f8f9756a92b6f93013bcf09cc57dd67633410c957a7f1f6a5735cb2fc6ee3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.fullscreen_text' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/color_fullscreen.xml",
      "language": "XML",
      "line": 3,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 1,
        "length": 22,
        "offset": 63,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<resources>\n    <color name=\"fullscreen_text\">@color/black</color>\n</resources>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "b0b1294cb7ad3b6d0d8bf159e1dcf955b1529e14e553bf93d650d6d01fa2e5eb"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.translucent' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 5,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 3,
        "length": 18,
        "offset": 95,
        "surroundingCode": "    <color name=\"black\">#FF000000</color>\n    <color name=\"white\">#FFFFFFFF</color>\n    <color name=\"translucent\">#00000000</color>\n    <color name=\"ic_launcher_foreground\">#FFFFFF</color>\n    <color name=\"ic_launcher_background\">#FF104287</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "07e339e0d890beaa6f137879fd97f33de1e1473a4b1d3cbfdfa0aab4eb08a205"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.ic_launcher_foreground' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 6,
      "offset": 12,
      "length": 29,
      "code": {
        "startLine": 4,
        "length": 29,
        "offset": 101,
        "surroundingCode": "    <color name=\"white\">#FFFFFFFF</color>\n    <color name=\"translucent\">#00000000</color>\n    <color name=\"ic_launcher_foreground\">#FFFFFF</color>\n    <color name=\"ic_launcher_background\">#FF104287</color>\n    <color name=\"about_black\">#121212</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "fa03be13bdb621899eaa0c04e87d59683ae04d41c5e2707f922198ebce4bc0b0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorPrimaryMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 11,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 9,
        "length": 22,
        "offset": 67,
        "surroundingCode": "\n    <color name=\"colorPrimary\">@color/blue_500</color>\n    <color name=\"colorPrimaryMd3\">@color/blue_500</color>\n    <color name=\"aboutHeader\">@color/blue_500</color>\n    <color name=\"textNormal\">#FF000000</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c88cd8732809de44eca306dcdc02f6ff31a98710b18bf594e12f7a6307e04615"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.aboutHeader' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 12,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 10,
        "length": 18,
        "offset": 124,
        "surroundingCode": "    <color name=\"colorPrimary\">@color/blue_500</color>\n    <color name=\"colorPrimaryMd3\">@color/blue_500</color>\n    <color name=\"aboutHeader\">@color/blue_500</color>\n    <color name=\"textNormal\">#FF000000</color>\n    <color name=\"textSecondary\">#80464646</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "63743550a8b2c4eaf78cd1f65f515253e367d667511717b997e907016644b4b0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.textNormal' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 13,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 11,
        "length": 17,
        "offset": 123,
        "surroundingCode": "    <color name=\"colorPrimaryMd3\">@color/blue_500</color>\n    <color name=\"aboutHeader\">@color/blue_500</color>\n    <color name=\"textNormal\">#FF000000</color>\n    <color name=\"textSecondary\">#80464646</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "dc2074255436e8f12eac2e436691ee20bd4fdd78c62a7032c6bb114974ed3a7b"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.textSecondary' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 14,
      "offset": 12,
      "length": 20,
      "code": {
        "startLine": 12,
        "length": 20,
        "offset": 112,
        "surroundingCode": "    <color name=\"aboutHeader\">@color/blue_500</color>\n    <color name=\"textNormal\">#FF000000</color>\n    <color name=\"textSecondary\">#80464646</color>\n\n    <color name=\"background_gray\">#FFDFDFDF</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "feead26907acab776dcec1d0e163729a070891f9ffa019f1dee7f0ba134c6f51"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.background_gray' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 16,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 14,
        "length": 22,
        "offset": 62,
        "surroundingCode": "    <color name=\"textSecondary\">#80464646</color>\n\n    <color name=\"background_gray\">#FFDFDFDF</color>\n    <color name=\"lib_icon_background\">#10000000</color>\n    <color name=\"feature_background\">#15000000</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "349be18c1f5dcd79e8f55d0aae874dee584d580c964bd455a09bc7888f948460"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.lib_icon_background' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 17,
      "offset": 12,
      "length": 26,
      "code": {
        "startLine": 15,
        "length": 26,
        "offset": 64,
        "surroundingCode": "\n    <color name=\"background_gray\">#FFDFDFDF</color>\n    <color name=\"lib_icon_background\">#10000000</color>\n    <color name=\"feature_background\">#15000000</color>\n    <color name=\"feature_ripple\">#40000000</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "fcbf4fa63adfcf9fb2b66ed6536c6ac29a281b773ee13a154dfca0833e8769cb"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.feature_background' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 18,
      "offset": 12,
      "length": 25,
      "code": {
        "startLine": 16,
        "length": 25,
        "offset": 119,
        "surroundingCode": "    <color name=\"background_gray\">#FFDFDFDF</color>\n    <color name=\"lib_icon_background\">#10000000</color>\n    <color name=\"feature_background\">#15000000</color>\n    <color name=\"feature_ripple\">#40000000</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "cd247f2c162182425a97afdcc4541f748d04936473b66150ddb42a59ea6dd9b3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.feature_ripple' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 19,
      "offset": 12,
      "length": 21,
      "code": {
        "startLine": 17,
        "length": 21,
        "offset": 122,
        "surroundingCode": "    <color name=\"lib_icon_background\">#10000000</color>\n    <color name=\"feature_background\">#15000000</color>\n    <color name=\"feature_ripple\">#40000000</color>\n\n    <color name=\"app_color_dark\">#B1B8DF</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "f595ec3c95e48bbb1314ab389c780d500a5b8b6bda5e10a1365924b79be9d699"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.app_color_dark' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 21,
      "offset": 12,
      "length": 21,
      "code": {
        "startLine": 19,
        "length": 21,
        "offset": 63,
        "surroundingCode": "    <color name=\"feature_ripple\">#40000000</color>\n\n    <color name=\"app_color_dark\">#B1B8DF</color>\n    <color name=\"highlight_component\">@color/material_blue_100</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "ad513ca746032dc709065b7d347ea10807cbf181bce94a703a5175cc331571d2"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.highlight_component' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 22,
      "offset": 12,
      "length": 26,
      "code": {
        "startLine": 20,
        "length": 26,
        "offset": 61,
        "surroundingCode": "\n    <color name=\"app_color_dark\">#B1B8DF</color>\n    <color name=\"highlight_component\">@color/material_blue_100</color>\n\n    <color name=\"bottom_sheet_header_handler\">#CCDFDFDF</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "e1ab44b507c44b37d6180089a9e48d9afa6d869df2fa00a63d776ae7f883671e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 24,
      "offset": 12,
      "length": 34,
      "code": {
        "startLine": 22,
        "length": 34,
        "offset": 83,
        "surroundingCode": "    <color name=\"highlight_component\">@color/material_blue_100</color>\n\n    <color name=\"bottom_sheet_header_handler\">#CCDFDFDF</color>\n    <color name=\"bottom_sheet_header_handler_activated\">#CC444444</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CC888888</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "74df4543dfe8ed8dcfc4b9d2387442853ca9d54de93524e3e390696f7bf9345e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler_activated' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 25,
      "offset": 12,
      "length": 44,
      "code": {
        "startLine": 23,
        "length": 44,
        "offset": 76,
        "surroundingCode": "\n    <color name=\"bottom_sheet_header_handler\">#CCDFDFDF</color>\n    <color name=\"bottom_sheet_header_handler_activated\">#CC444444</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CC888888</color>\n    <color name=\"bottom_sheet_header_handler_activated_md3\">#CC444444</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "03787e055d5077aff87c240cfc265d66af5f07fb0a18accc84816ebbe4d33164"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler_md3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 26,
      "offset": 12,
      "length": 38,
      "code": {
        "startLine": 24,
        "length": 38,
        "offset": 149,
        "surroundingCode": "    <color name=\"bottom_sheet_header_handler\">#CCDFDFDF</color>\n    <color name=\"bottom_sheet_header_handler_activated\">#CC444444</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CC888888</color>\n    <color name=\"bottom_sheet_header_handler_activated_md3\">#CC444444</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "35d54cbb08eb40fd944e26d5102b7fa498adced35ca2647917702cbb87558828"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler_activated_md3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 27,
      "offset": 12,
      "length": 48,
      "code": {
        "startLine": 25,
        "length": 48,
        "offset": 153,
        "surroundingCode": "    <color name=\"bottom_sheet_header_handler_activated\">#CC444444</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CC888888</color>\n    <color name=\"bottom_sheet_header_handler_activated_md3\">#CC444444</color>\n\n    <color name=\"common_transparent_20\">#33000000</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "2394718d732ad6348e6a520d9441f1a1977ca7661d24d54a4539cec30eddbca0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.common_transparent_20' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/colors.xml",
      "language": "XML",
      "line": 29,
      "offset": 12,
      "length": 28,
      "code": {
        "startLine": 27,
        "length": 28,
        "offset": 90,
        "surroundingCode": "    <color name=\"bottom_sheet_header_handler_activated_md3\">#CC444444</color>\n\n    <color name=\"common_transparent_20\">#33000000</color>\n</resources>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "d06815a620403c4f764a9443f3ce04993290ab52d2ec523ba462ec83912569de"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.dimen.simple_page_header_height' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/dimens.xml",
      "language": "XML",
      "line": 3,
      "offset": 12,
      "length": 32,
      "code": {
        "startLine": 1,
        "length": 32,
        "offset": 62,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <dimen name=\"simple_page_header_height\">212dp</dimen>\n    <dimen name=\"simple_page_avatar_size\">38dp</dimen>\n    <dimen name=\"simple_page_license_text_size\">13sp</dimen>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c667bb2f4fea8cf86116a59d7ea1e7283dd6b358f24d389396b029a17efe31f3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.dimen.simple_page_avatar_size' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/dimens.xml",
      "language": "XML",
      "line": 4,
      "offset": 12,
      "length": 30,
      "code": {
        "startLine": 2,
        "length": 30,
        "offset": 81,
        "surroundingCode": "<resources>\n    <dimen name=\"simple_page_header_height\">212dp</dimen>\n    <dimen name=\"simple_page_avatar_size\">38dp</dimen>\n    <dimen name=\"simple_page_license_text_size\">13sp</dimen>\n    <dimen name=\"simple_page_recommendation_icon_size\">48dp</dimen>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "9f69edfbc59a3c31fc22f9faba54beabf16e11a7ffd0dea6f9a496cbe228c407"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.dimen.simple_page_license_text_size' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/dimens.xml",
      "language": "XML",
      "line": 5,
      "offset": 12,
      "length": 36,
      "code": {
        "startLine": 3,
        "length": 36,
        "offset": 124,
        "surroundingCode": "    <dimen name=\"simple_page_header_height\">212dp</dimen>\n    <dimen name=\"simple_page_avatar_size\">38dp</dimen>\n    <dimen name=\"simple_page_license_text_size\">13sp</dimen>\n    <dimen name=\"simple_page_recommendation_icon_size\">48dp</dimen>\n    <dimen name=\"simple_page_bottom_sheet_item_height\">48dp</dimen>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "b5c6508af7639fc55efbf382196d1d5201d35a8e06163c70addbc9998f82342a"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.dimen.simple_page_recommendation_icon_size' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/dimens.xml",
      "language": "XML",
      "line": 6,
      "offset": 12,
      "length": 43,
      "code": {
        "startLine": 4,
        "length": 43,
        "offset": 127,
        "surroundingCode": "    <dimen name=\"simple_page_avatar_size\">38dp</dimen>\n    <dimen name=\"simple_page_license_text_size\">13sp</dimen>\n    <dimen name=\"simple_page_recommendation_icon_size\">48dp</dimen>\n    <dimen name=\"simple_page_bottom_sheet_item_height\">48dp</dimen>\n    <dimen name=\"simple_page_item_category_padding_horizontal\">16dp</dimen>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "5ef8504e5bb840c80fbfef569ab9a6ea6f291d985a6fa749d62bcd91580be69d"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.dimen.simple_page_bottom_sheet_item_height' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/dimens.xml",
      "language": "XML",
      "line": 7,
      "offset": 12,
      "length": 43,
      "code": {
        "startLine": 5,
        "length": 43,
        "offset": 140,
        "surroundingCode": "    <dimen name=\"simple_page_license_text_size\">13sp</dimen>\n    <dimen name=\"simple_page_recommendation_icon_size\">48dp</dimen>\n    <dimen name=\"simple_page_bottom_sheet_item_height\">48dp</dimen>\n    <dimen name=\"simple_page_item_category_padding_horizontal\">16dp</dimen>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "6584b889100000815c4d2b783eff54598c2b7eba756ac3db9bbde9b7f5397c85"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.md_theme_Library_light_background' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/md_themes.xml",
      "language": "XML",
      "line": 19,
      "offset": 12,
      "length": 40,
      "code": {
        "startLine": 17,
        "length": 40,
        "offset": 161,
        "surroundingCode": "    <color name=\"md_theme_Library_light_errorContainer\">#FFFFDAD4</color>\n    <color name=\"md_theme_Library_light_onErrorContainer\">#FF410001</color>\n    <color name=\"md_theme_Library_light_background\">#FFFFFBFE</color>\n    <color name=\"md_theme_Library_light_onBackground\">#FF1C1B1E</color>\n    <color name=\"md_theme_Library_light_surface\">#FFFFFBFE</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "eaf2785f9d263cc0b2f9298528556f9e7ebd907c5a027aa08dd72732df140062"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.md_theme_Library_dark_background' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/md_themes.xml",
      "language": "XML",
      "line": 45,
      "offset": 12,
      "length": 39,
      "code": {
        "startLine": 43,
        "length": 39,
        "offset": 159,
        "surroundingCode": "    <color name=\"md_theme_Library_dark_errorContainer\">#FF930006</color>\n    <color name=\"md_theme_Library_dark_onErrorContainer\">#FFFFDAD4</color>\n    <color name=\"md_theme_Library_dark_background\">#FF1C1B1E</color>\n    <color name=\"md_theme_Library_dark_onBackground\">#FFE6E1E6</color>\n    <color name=\"md_theme_Library_dark_surface\">#FF1C1B1E</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "dd318b82b7f04e05f453ebddf7c58c7966c1b6820822ad70b93e2a06b01fb696"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.secret_title' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/strings.xml",
      "language": "XML",
      "line": 11,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 9,
        "length": 19,
        "offset": 104,
        "surroundingCode": "    <string name=\"electric_title\">剩余电量</string>\n    <string name=\"bath_title\">浴室预约</string>\n    <string name=\"secret_title\">你 被 骗 了</string>\n    <string name=\"about_title\">关于</string>\n    <string name=\"volunteer_title\">志愿时长</string>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "f917cc83ca309e2acedae0b6acc7025109cd3e07ffd27c4d214ec8531291dd7f"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.cancel' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/strings.xml",
      "language": "XML",
      "line": 32,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 30,
        "length": 13,
        "offset": 88,
        "surroundingCode": "    <string name=\"temp\">暂离码</string>\n    <string name=\"refresh\">刷新</string>\n    <string name=\"cancel\">取消预约</string>\n    <string name=\"reserve\">预约座位</string>\n    <string name=\"reset\">重置预约</string>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "41659407d0bff7477442a5d74b6ba80e5d428cfec9184080368903164cf1a6a3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.reserve' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/strings.xml",
      "language": "XML",
      "line": 33,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 31,
        "length": 14,
        "offset": 91,
        "surroundingCode": "    <string name=\"refresh\">刷新</string>\n    <string name=\"cancel\">取消预约</string>\n    <string name=\"reserve\">预约座位</string>\n    <string name=\"reset\">重置预约</string>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "8d209457db04f8691ca9eed81cd2557a29a288951042d3559ec1f95f24bc6d00"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.reset' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/strings.xml",
      "language": "XML",
      "line": 34,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 32,
        "length": 12,
        "offset": 93,
        "surroundingCode": "    <string name=\"cancel\">取消预约</string>\n    <string name=\"reserve\">预约座位</string>\n    <string name=\"reset\">重置预约</string>\n\n    <string name=\"inside\">进行中</string>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "80d5c91880a060e8e93a7f0c4d78c7b7fd661ba0160500fd379573d14d649687"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.CustomBottomSheetDialog_Md3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 14,
      "offset": 12,
      "length": 34,
      "code": {
        "startLine": 12,
        "length": 34,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"CustomBottomSheetDialog.Md3\" parent=\"@style/ThemeOverlay.Material3.BottomSheetDialog\">\n        <item name=\"bottomSheetStyle\">@style/CustomBottomSheet.Md3</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "ac2136a99b65d404d99e04396c00f6f001094d4c2dbfbdd5cc746d765ac82a67"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.CustomBottomSheet_Md3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 22,
      "offset": 12,
      "length": 28,
      "code": {
        "startLine": 20,
        "length": 28,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"CustomBottomSheet.Md3\" parent=\"Widget.Material3.BottomSheet\">\n        <item name=\"shapeAppearanceOverlay\">@style/CustomShapeAppearanceBottomSheetDialog</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "8310e3e17a20a1e453d8110cb86c3dcf3bca9d2973fae36cdbf5fd92dc9584cd"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.GeneralProgressIndicator' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 34,
      "offset": 12,
      "length": 31,
      "code": {
        "startLine": 32,
        "length": 31,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"GeneralProgressIndicator\" parent=\"Widget.MaterialComponents.LinearProgressIndicator\">\n        <item name=\"android:width\">200dp</item>\n        <item name=\"trackCornerRadius\">3dp</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "f5762da0e0f8bced8706ad1f48f22ccb27adcce545903c2bc882fbaabd40c755"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.TextView_SansSerif' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 39,
      "offset": 12,
      "length": 25,
      "code": {
        "startLine": 37,
        "length": 25,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"TextView.SansSerif\" parent=\"Widget.MaterialComponents.TextView\">\n        <item name=\"fontFamily\">sans-serif</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "f1af525b167ddeedf7b5ef291a61c18072e8747bf909614f1600cb3ab0317e35"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.TextView_SansSerifBlack' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 43,
      "offset": 12,
      "length": 30,
      "code": {
        "startLine": 41,
        "length": 30,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"TextView.SansSerifBlack\" parent=\"Widget.MaterialComponents.TextView\">\n        <item name=\"fontFamily\">sans-serif-black</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "e6149e0d8cde546682ba9e24ced33bbee2c1b94d1764f1aef0d80f4daa9b04b8"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.TextView_SansSerifCondensed' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 51,
      "offset": 12,
      "length": 34,
      "code": {
        "startLine": 49,
        "length": 34,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"TextView.SansSerifCondensed\" parent=\"Widget.MaterialComponents.TextView\">\n        <item name=\"fontFamily\">sans-serif-condensed</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "91e3c5604c1bff24fc165afc48f3be18a0d00576b906d0d03a7a42471a83260b"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.TextView_SansSerifCondensedMedium' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 55,
      "offset": 12,
      "length": 40,
      "code": {
        "startLine": 53,
        "length": 40,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"TextView.SansSerifCondensedMedium\" parent=\"Widget.MaterialComponents.TextView\">\n        <item name=\"fontFamily\">sans-serif-condensed-medium</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "9c3a96f5e556f0bf496f8f2fa5461a16222a44577bdbfd384be33d5d43a85422"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.TextView_MonoSpace' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 59,
      "offset": 12,
      "length": 25,
      "code": {
        "startLine": 57,
        "length": 25,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"TextView.MonoSpace\" parent=\"Widget.MaterialComponents.TextView\">\n        <item name=\"fontFamily\">monospace</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "88f574f8bd864cb11850f29840b71c587d59893acb08f1f1654009b591b8ded4"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.AppListMaterialCard' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 63,
      "offset": 12,
      "length": 26,
      "code": {
        "startLine": 61,
        "length": 26,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"AppListMaterialCard\" parent=\"Widget.MaterialComponents.CardView\">\n        <item name=\"cardCornerRadius\">3dp</item>\n        <item name=\"cardElevation\">1dp</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "59407d64a600f1e1d03ebfbe20f2ce5b370d0d81bc097bfac343a4259f61f333"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.AlbumMaterialCard' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 68,
      "offset": 12,
      "length": 24,
      "code": {
        "startLine": 66,
        "length": 24,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"AlbumMaterialCard\" parent=\"Widget.Material3.CardView.Outlined\">\n        <item name=\"cardCornerRadius\">8dp</item>\n    </style>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "deed3d20305c9c4dc0d9749679b44aa8a2d9e54a70c8fc06be2af4d4d2297141"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.App_Material3_CardView' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 72,
      "offset": 12,
      "length": 29,
      "code": {
        "startLine": 70,
        "length": 29,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"App.Material3.CardView\" parent=\"Widget.Material3.CardView.Outlined\">\n        <item name=\"android:stateListAnimator\">@null</item>\n        <item name=\"android:background\">@null</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c825394ae56b7772b453719978b1194d28094e848837eabe54323e0f05814af6"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Transparent' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/styles.xml",
      "language": "XML",
      "line": 85,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 83,
        "length": 18,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Transparent\" parent=\"@style/AppTheme\">\n        <item name=\"android:windowBackground\">@android:color/transparent</item>\n        <item name=\"windowNoTitle\">true</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "a18c6bf603a5207a31143b41af17213b6d78958699d13f8ad7db0e828ee60a6f"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Main_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 21,
      "offset": 12,
      "length": 31,
      "code": {
        "startLine": 19,
        "length": 31,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Main.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Main.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "ea5d64d02b314f2d14029db4e70b3b24b0268bc836575a442b4de5b08ea6d439"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Main_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 23,
      "offset": 12,
      "length": 30,
      "code": {
        "startLine": 21,
        "length": 30,
        "offset": 105,
        "surroundingCode": "    <style name=\"Theme.Main.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Main.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Purple application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "000c70b67291187ba100c221de55133a903213950bc758cb274fe1acb3ddac33"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Purple_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 44,
      "offset": 12,
      "length": 33,
      "code": {
        "startLine": 42,
        "length": 33,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Purple.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Purple.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "894d5ef981a2df6ca04677b2c721724b459e3871a1519606f9b1fba92a01e324"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Purple_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 46,
      "offset": 12,
      "length": 32,
      "code": {
        "startLine": 44,
        "length": 32,
        "offset": 107,
        "surroundingCode": "    <style name=\"Theme.Purple.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Purple.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Blue application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "ee752442651453466b9c52c72bae501617ecb582994c5070e55074419a101ad3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Blue_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 67,
      "offset": 12,
      "length": 31,
      "code": {
        "startLine": 65,
        "length": 31,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Blue.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Blue.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "7078f353646a13390c46592f38730976466d8e132aa08ea9d2975931a19be24c"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Blue_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 69,
      "offset": 12,
      "length": 30,
      "code": {
        "startLine": 67,
        "length": 30,
        "offset": 105,
        "surroundingCode": "    <style name=\"Theme.Blue.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Blue.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Pink application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "aebc84a117a66233237515ebab02d0a108fb220a0e4e5ba428480c90cad4adf0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Pink_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 90,
      "offset": 12,
      "length": 31,
      "code": {
        "startLine": 88,
        "length": 31,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Pink.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Pink.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "b83a997fbbf7701e09b6a4b1faec443612a4dbc791e3d7950b49ab3e7ed00877"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Pink_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 92,
      "offset": 12,
      "length": 30,
      "code": {
        "startLine": 90,
        "length": 30,
        "offset": 105,
        "surroundingCode": "    <style name=\"Theme.Pink.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Pink.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Green application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "89d2c06fb47ac1f26b09601f2ff055d15cd5045f2849ce452d3ce8349181b5f0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Green_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 113,
      "offset": 12,
      "length": 32,
      "code": {
        "startLine": 111,
        "length": 32,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Green.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Green.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "35855255c657a35fa88cd96209a2ad9ac06dfe192a4469f8e4519e00d1d0c467"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Green_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 115,
      "offset": 12,
      "length": 31,
      "code": {
        "startLine": 113,
        "length": 31,
        "offset": 106,
        "surroundingCode": "    <style name=\"Theme.Green.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Green.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Orange application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "6c9dd31f701c47bd59c84915ea8aab89cd96905235b369ebb12d876b3a1ced5e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Orange_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 136,
      "offset": 12,
      "length": 33,
      "code": {
        "startLine": 134,
        "length": 33,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Orange.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Orange.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "b7deccdc03fb42bc6e91fc1ff05cda493d9e7314deded816d6f13d0dd8fdc8f4"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Orange_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 138,
      "offset": 12,
      "length": 32,
      "code": {
        "startLine": 136,
        "length": 32,
        "offset": 107,
        "surroundingCode": "    <style name=\"Theme.Orange.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Orange.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Red application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "e37af12f0b56b37f247bdfd54f5a8a263170a39a18f151e9a0bc270f01ab5280"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Red_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 159,
      "offset": 12,
      "length": 30,
      "code": {
        "startLine": 157,
        "length": 30,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Red.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Red.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "a623c174fe25354ac4f6483602d4c1a9763fe97dfd7b3ac59990d27919d232d0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Red_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 161,
      "offset": 12,
      "length": 29,
      "code": {
        "startLine": 159,
        "length": 29,
        "offset": 104,
        "surroundingCode": "    <style name=\"Theme.Red.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Red.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Simple application theme. -->"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "14db8a25e7ea94820d2e62ef0c4877463b25ea12d8a968402ccb2bf150dfa825"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Simple_AppBarOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 182,
      "offset": 12,
      "length": 33,
      "code": {
        "startLine": 180,
        "length": 33,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"Theme.Simple.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Simple.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "8402737444044fff3d5d8bceda24a2cfd3eb69f83e52629a490df5f469bc8c82"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.Theme_Simple_PopupOverlay' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 184,
      "offset": 12,
      "length": 32,
      "code": {
        "startLine": 182,
        "length": 32,
        "offset": 107,
        "surroundingCode": "    <style name=\"Theme.Simple.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n    <style name=\"Theme.Simple.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <style name=\"CustomProgressDialog\" parent=\"Theme.AppCompat.Dialog\">"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "23630f826ba890666170bebf278b409912432a69e5460b71535f397b7cfff3c0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.CustomProgressDialog' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_custom.xml",
      "language": "XML",
      "line": 186,
      "offset": 12,
      "length": 27,
      "code": {
        "startLine": 184,
        "length": 27,
        "offset": 97,
        "surroundingCode": "    <style name=\"Theme.Simple.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n\n    <style name=\"CustomProgressDialog\" parent=\"Theme.AppCompat.Dialog\">\n        <!--此属性控制悬浮窗背景是否变暗-->\n        <item name=\"android:backgroundDimEnabled\">true</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "bcf5bb3b79a2e95d9302fa4ba9dcb4d728d4a2f8c12d1c38fddfb627e6de8162"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.ThemeOverlay_Black' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values/themes_overlay.xml",
      "language": "XML",
      "line": 6,
      "offset": 12,
      "length": 25,
      "code": {
        "startLine": 4,
        "length": 25,
        "offset": 46,
        "surroundingCode": "    <style name=\"ThemeOverlay\" />\n\n    <style name=\"ThemeOverlay.Black\">\n        <item name=\"android:colorPrimary\">@android:color/black</item>\n        <item name=\"android:colorPrimaryDark\">@android:color/black</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "375ac1cc6ee1d055041f657f3e046099915ad08c5327ae0aeadb95ddbfee363e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.secret_title' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-en/strings.xml",
      "language": "XML",
      "line": 11,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 9,
        "length": 19,
        "offset": 139,
        "surroundingCode": "    <string name=\"electric_title\">Remain Electric Charge</string>\n    <string name=\"bath_title\">Bathhouse Reservation</string>\n    <string name=\"secret_title\">FAKE lol</string>\n    <string name=\"about_title\">About</string>\n    <string name=\"volunteer_title\">Volunteer hours</string>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "6a07160434799204805ac48adbb61b16d07d74052161957728a2276bab92bfb5"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.cancel' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-en/strings.xml",
      "language": "XML",
      "line": 32,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 30,
        "length": 13,
        "offset": 97,
        "surroundingCode": "    <string name=\"temp\">Temp out</string>\n    <string name=\"refresh\">Reload</string>\n    <string name=\"cancel\">Cancel\\nreservation</string>\n    <string name=\"reserve\">Reserve\\na seat</string>\n    <string name=\"reset\">Reset\\nreservation</string>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "8653654dd468d88b9c3d4499b2267dda0a273aaebbff10bd9ebf2568eedb5d9e"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.reserve' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-en/strings.xml",
      "language": "XML",
      "line": 33,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 31,
        "length": 14,
        "offset": 110,
        "surroundingCode": "    <string name=\"refresh\">Reload</string>\n    <string name=\"cancel\">Cancel\\nreservation</string>\n    <string name=\"reserve\">Reserve\\na seat</string>\n    <string name=\"reset\">Reset\\nreservation</string>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c815f434c782f7a471b035fa6a55e64f115db0519d1fa05e5a5cbffd05f59f46"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.string.reset' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-en/strings.xml",
      "language": "XML",
      "line": 34,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 32,
        "length": 12,
        "offset": 119,
        "surroundingCode": "    <string name=\"cancel\">Cancel\\nreservation</string>\n    <string name=\"reserve\">Reserve\\na seat</string>\n    <string name=\"reset\">Reset\\nreservation</string>\n\n    <string name=\"inside\">Inside</string>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c8be2462f9e113bc3bc3e5a877c763d863058d4ecceee3c2a12773e2fecc7dd9"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.fullscreen_text' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/color_fullscreen.xml",
      "language": "XML",
      "line": 3,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 1,
        "length": 22,
        "offset": 63,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<resources>\n    <color name=\"fullscreen_text\">@color/white</color>\n</resources>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "95d6248e6df94d0d971758fe01a90c81d8a201645a751dec16122f4a54818b83"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorPrimaryMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 4,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 2,
        "length": 22,
        "offset": 70,
        "surroundingCode": "<resources>\n    <color name=\"colorPrimary\">#90CAF9</color>\n    <color name=\"colorPrimaryMd3\">#90CAF9</color>\n    <color name=\"aboutHeader\">#FF121212</color>\n    <color name=\"textNormal\">#FFFFFFFF</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "a45872cb79039ab7aca1ec4b1df996d753d061ddbb9883aaab190895e8af2ad3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.aboutHeader' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 5,
      "offset": 12,
      "length": 18,
      "code": {
        "startLine": 3,
        "length": 18,
        "offset": 108,
        "surroundingCode": "    <color name=\"colorPrimary\">#90CAF9</color>\n    <color name=\"colorPrimaryMd3\">#90CAF9</color>\n    <color name=\"aboutHeader\">#FF121212</color>\n    <color name=\"textNormal\">#FFFFFFFF</color>\n    <color name=\"textSecondary\">#80BEBEBE</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "4a4363fbba7c145d82537af0cf266d4654fcea643696be2d2d375841028d08f3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.textNormal' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 6,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 4,
        "length": 17,
        "offset": 109,
        "surroundingCode": "    <color name=\"colorPrimaryMd3\">#90CAF9</color>\n    <color name=\"aboutHeader\">#FF121212</color>\n    <color name=\"textNormal\">#FFFFFFFF</color>\n    <color name=\"textSecondary\">#80BEBEBE</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "74ed7927fa2219f231e71b97ac781ff1845fbd30c7af4109a8b1313b30c3daf3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.textSecondary' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 7,
      "offset": 12,
      "length": 20,
      "code": {
        "startLine": 5,
        "length": 20,
        "offset": 106,
        "surroundingCode": "    <color name=\"aboutHeader\">#FF121212</color>\n    <color name=\"textNormal\">#FFFFFFFF</color>\n    <color name=\"textSecondary\">#80BEBEBE</color>\n\n    <color name=\"background_gray\">#FF121212</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "47e0c060651dbad77dd3415a7c7d154025f7035bd0e2d2730d8f0896cfc13864"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.background_gray' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 9,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 7,
        "length": 22,
        "offset": 62,
        "surroundingCode": "    <color name=\"textSecondary\">#80BEBEBE</color>\n\n    <color name=\"background_gray\">#FF121212</color>\n    <color name=\"lib_icon_background\">#50FFFFFF</color>\n    <color name=\"feature_background\">#25000000</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "321af53f712d60dee943e245eaf59bdf9bb4eeede88bf3394b5aca224fe9034f"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.lib_icon_background' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 10,
      "offset": 12,
      "length": 26,
      "code": {
        "startLine": 8,
        "length": 26,
        "offset": 64,
        "surroundingCode": "\n    <color name=\"background_gray\">#FF121212</color>\n    <color name=\"lib_icon_background\">#50FFFFFF</color>\n    <color name=\"feature_background\">#25000000</color>\n    <color name=\"feature_ripple\">#25FFFFFF</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "7eae4bad62307cbbd58ed057de2473a45510b25d32be339123f87f63c8fd6843"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.feature_background' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 11,
      "offset": 12,
      "length": 25,
      "code": {
        "startLine": 9,
        "length": 25,
        "offset": 119,
        "surroundingCode": "    <color name=\"background_gray\">#FF121212</color>\n    <color name=\"lib_icon_background\">#50FFFFFF</color>\n    <color name=\"feature_background\">#25000000</color>\n    <color name=\"feature_ripple\">#25FFFFFF</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "5320ccdb7db9850eba3ac0fbbfc23b237dbcd6f815cfedd0c5f4517604ad94fd"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.feature_ripple' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 12,
      "offset": 12,
      "length": 21,
      "code": {
        "startLine": 10,
        "length": 21,
        "offset": 122,
        "surroundingCode": "    <color name=\"lib_icon_background\">#50FFFFFF</color>\n    <color name=\"feature_background\">#25000000</color>\n    <color name=\"feature_ripple\">#25FFFFFF</color>\n\n    <color name=\"highlight_component\">@color/material_blue_800</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "6aa9651a024b8f98f8ab26537c542fd12b64490269b1576acbb1dac2aa72fa40"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.highlight_component' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 14,
      "offset": 12,
      "length": 26,
      "code": {
        "startLine": 12,
        "length": 26,
        "offset": 63,
        "surroundingCode": "    <color name=\"feature_ripple\">#25FFFFFF</color>\n\n    <color name=\"highlight_component\">@color/material_blue_800</color>\n\n    <color name=\"bottom_sheet_header_handler\">#CCBBBBBB</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "5c7fd26fc9a85f07caab7fd3c726b748da63d2ff17a6eacc5d2b8f0fbf6019ab"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 16,
      "offset": 12,
      "length": 34,
      "code": {
        "startLine": 14,
        "length": 34,
        "offset": 83,
        "surroundingCode": "    <color name=\"highlight_component\">@color/material_blue_800</color>\n\n    <color name=\"bottom_sheet_header_handler\">#CCBBBBBB</color>\n    <color name=\"bottom_sheet_header_handler_activated\">#FFFFFFFF</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CCBBBBBB</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "a08cd770828e0871f643d7e7ccc4c2d53aa7a1333a2862f0bba9ec645d3d5a3d"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler_activated' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 17,
      "offset": 12,
      "length": 44,
      "code": {
        "startLine": 15,
        "length": 44,
        "offset": 76,
        "surroundingCode": "\n    <color name=\"bottom_sheet_header_handler\">#CCBBBBBB</color>\n    <color name=\"bottom_sheet_header_handler_activated\">#FFFFFFFF</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CCBBBBBB</color>\n    <color name=\"bottom_sheet_header_handler_activated_md3\">#FFFFFFFF</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "08971471dbc035f77750f38d603e4fa2109abd807b5d0545b540ab29fdbd5c85"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler_md3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 18,
      "offset": 12,
      "length": 38,
      "code": {
        "startLine": 16,
        "length": 38,
        "offset": 149,
        "surroundingCode": "    <color name=\"bottom_sheet_header_handler\">#CCBBBBBB</color>\n    <color name=\"bottom_sheet_header_handler_activated\">#FFFFFFFF</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CCBBBBBB</color>\n    <color name=\"bottom_sheet_header_handler_activated_md3\">#FFFFFFFF</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "c3ef120b43038c83b28c89ff78a8dfe3c90c5bb8671d565fb5ff1d913b510fb0"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.bottom_sheet_header_handler_activated_md3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 19,
      "offset": 12,
      "length": 48,
      "code": {
        "startLine": 17,
        "length": 48,
        "offset": 153,
        "surroundingCode": "    <color name=\"bottom_sheet_header_handler_activated\">#FFFFFFFF</color>\n    <color name=\"bottom_sheet_header_handler_md3\">#CCBBBBBB</color>\n    <color name=\"bottom_sheet_header_handler_activated_md3\">#FFFFFFFF</color>\n\n    <color name=\"ic_launcher_foreground\">@color/blue_500</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "97eab524720a54df7b7885d9dfbcd60e5f68aa195f7b713eaf1e376094e646e7"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.ic_launcher_foreground' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/colors.xml",
      "language": "XML",
      "line": 21,
      "offset": 12,
      "length": 29,
      "code": {
        "startLine": 19,
        "length": 29,
        "offset": 90,
        "surroundingCode": "    <color name=\"bottom_sheet_header_handler_activated_md3\">#FFFFFFFF</color>\n\n    <color name=\"ic_launcher_foreground\">@color/blue_500</color>\n</resources>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "7f4082be45ef23109f51a00ee1036a143bdc2b383cb0fe9745ca25183a741354"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.style.CustomProgressDialog' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night/themes_custom.xml",
      "language": "XML",
      "line": 106,
      "offset": 12,
      "length": 27,
      "code": {
        "startLine": 104,
        "length": 27,
        "offset": 25,
        "surroundingCode": "    </style>\n\n    <style name=\"CustomProgressDialog\" parent=\"Theme.AppCompat.Dialog\">\n        <!--此属性控制悬浮窗背景是否变暗-->\n        <item name=\"android:backgroundDimEnabled\">true</item>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "ce451927a4fcdf2432cdbfef5363c53a8726dbb79b601a4d19158596329f7ce3"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorPrimaryMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night-v31/colors.xml",
      "language": "XML",
      "line": 3,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 1,
        "length": 22,
        "offset": 62,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimaryMd3\">@android:color/system_accent1_100</color>\n    <color name=\"colorSurfaceMd3\">@android:color/system_neutral1_900</color>\n    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_700</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "1ba9d0c2e33aa3b438aa6af55fa84b5989ca36c63f96e289d5bd0fc2b741e172"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorSurfaceMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night-v31/colors.xml",
      "language": "XML",
      "line": 4,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 2,
        "length": 22,
        "offset": 99,
        "surroundingCode": "<resources>\n    <color name=\"colorPrimaryMd3\">@android:color/system_accent1_100</color>\n    <color name=\"colorSurfaceMd3\">@android:color/system_neutral1_900</color>\n    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_700</color>\n</resources>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "75c90d182fd9c449aeb0b92fbb30bd927f775ea76f85dfee1813bec511a01ed2"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorActivatedMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-night-v31/colors.xml",
      "language": "XML",
      "line": 5,
      "offset": 12,
      "length": 24,
      "code": {
        "startLine": 3,
        "length": 24,
        "offset": 164,
        "surroundingCode": "    <color name=\"colorPrimaryMd3\">@android:color/system_accent1_100</color>\n    <color name=\"colorSurfaceMd3\">@android:color/system_neutral1_900</color>\n    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_700</color>\n</resources>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "0dd47e9cd0bb7e0ff610804cac7e0b9629745fbaa09b36dac924460bb21d7b89"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorPrimaryMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-v31/colors.xml",
      "language": "XML",
      "line": 3,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 1,
        "length": 22,
        "offset": 62,
        "surroundingCode": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimaryMd3\">@android:color/system_accent1_600</color>\n    <color name=\"colorSurfaceMd3\">@android:color/system_neutral1_50</color>\n    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_100</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "abf4c468ade787b81a62cd9ea2c5f246a877731ef87af8285c48b06b6ed01a3f"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorSurfaceMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-v31/colors.xml",
      "language": "XML",
      "line": 4,
      "offset": 12,
      "length": 22,
      "code": {
        "startLine": 2,
        "length": 22,
        "offset": 99,
        "surroundingCode": "<resources>\n    <color name=\"colorPrimaryMd3\">@android:color/system_accent1_600</color>\n    <color name=\"colorSurfaceMd3\">@android:color/system_neutral1_50</color>\n    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_100</color>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "fb1e64bced5eee15493a964ba433a1cd957752e00c5963b8051f11b2cbbed448"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.colorActivatedMd3' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-v31/colors.xml",
      "language": "XML",
      "line": 5,
      "offset": 12,
      "length": 24,
      "code": {
        "startLine": 3,
        "length": 24,
        "offset": 163,
        "surroundingCode": "    <color name=\"colorPrimaryMd3\">@android:color/system_accent1_600</color>\n    <color name=\"colorSurfaceMd3\">@android:color/system_neutral1_50</color>\n    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_100</color>\n\n    <color name=\"ic_launcher_foreground\">@android:color/system_accent1_0</color>"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "4b1b5636d0a549125cf0030326453ab39aa47735bd0ad695140e0ee11cfd9795"
},{
  "tool": "Code Inspection",
  "category": "Android Lint: Performance",
  "type": "Unused resources",
  "severity": "High",
  "comment": "The resource 'R.color.ic_launcher_foreground' appears to be unused",
  "detailsInfo": "Unused resources  \n\nUnused resources make applications larger and slow down builds.  \n\n<br />\n\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.  \n\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.  \n,  \n\nIssue id: UnusedResources",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/values-v31/colors.xml",
      "language": "XML",
      "line": 7,
      "offset": 12,
      "length": 29,
      "code": {
        "startLine": 5,
        "length": 29,
        "offset": 91,
        "surroundingCode": "    <color name=\"colorActivatedMd3\">@android:color/system_neutral1_100</color>\n\n    <color name=\"ic_launcher_foreground\">@android:color/system_accent1_0</color>\n</resources>\n"
      }
    }
  ],
  "attributes": {
    "module": "Library-One-Tap.app.main",
    "inspectionName": "AndroidLintUnusedResources"
  },
  "hash": "6c50a220161443ec9752b378ae96a26039fc33f6215e6950dbdcfa8a739d9f13"
}]}