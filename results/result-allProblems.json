{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Class",
  "type": "Class name same as ancestor name",
  "severity": "High",
  "comment": "Class name 'ViewHolder' is the same as one of its superclass' names",
  "detailsInfo": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing.\n\n**Example:**\n\n\n      package util;\n      abstract class Iterable<T> implements java.lang.Iterable<T> {}\n\nA quick-fix that renames such classes is available only in the editor.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/recycleview/simplepage/CardViewBinder.java",
      "language": "JAVA",
      "line": 32,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 30,
        "length": 10,
        "offset": 31,
        "surroundingCode": "    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder {\n\n        public final TextView content;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ClassNameSameAsAncestorName"
  },
  "hash": "cbc213bda711feebb4c3220f78bf5170c51b09d260d56e3f3b0453d67bd88988"
},{
  "tool": "Code Inspection",
  "category": "Class",
  "type": "Class name same as ancestor name",
  "severity": "High",
  "comment": "Class name 'ViewHolder' is the same as one of its superclass' names",
  "detailsInfo": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing.\n\n**Example:**\n\n\n      package util;\n      abstract class Iterable<T> implements java.lang.Iterable<T> {}\n\nA quick-fix that renames such classes is available only in the editor.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/ui/about/ContributorViewBinder.java",
      "language": "JAVA",
      "line": 52,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 50,
        "length": 10,
        "offset": 31,
        "surroundingCode": "    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n\n        public final ImageView avatar;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ClassNameSameAsAncestorName"
  },
  "hash": "4802cbe9b87e9c8eb290cfadc78b03ee233e1db8e43067aba4940b251e712894"
},{
  "tool": "Code Inspection",
  "category": "Class",
  "type": "Class name same as ancestor name",
  "severity": "High",
  "comment": "Class name 'ViewHolder' is the same as one of its superclass' names",
  "detailsInfo": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing.\n\n**Example:**\n\n\n      package util;\n      abstract class Iterable<T> implements java.lang.Iterable<T> {}\n\nA quick-fix that renames such classes is available only in the editor.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/recycleview/simplepage/ClickableItemViewBinder.java",
      "language": "JAVA",
      "line": 44,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 42,
        "length": 10,
        "offset": 31,
        "surroundingCode": "    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n\n        protected @NonNull"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ClassNameSameAsAncestorName"
  },
  "hash": "7aff202a72eb4f4d9fa237a8acc4ecedad352afa949ee66a6531d295feb076f3"
},{
  "tool": "Code Inspection",
  "category": "Class",
  "type": "Class name same as ancestor name",
  "severity": "High",
  "comment": "Class name 'ViewHolder' is the same as one of its superclass' names",
  "detailsInfo": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing.\n\n**Example:**\n\n\n      package util;\n      abstract class Iterable<T> implements java.lang.Iterable<T> {}\n\nA quick-fix that renames such classes is available only in the editor.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/recycleview/simplepage/CategoryViewBinder.java",
      "language": "JAVA",
      "line": 40,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 38,
        "length": 10,
        "offset": 31,
        "surroundingCode": "    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder {\n\n        public final TextView category;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ClassNameSameAsAncestorName"
  },
  "hash": "3c44ff7000336b0a2f1e73b3663a821a6b190cdcee7b8689abeaa9fe1d640102"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/ui/about/ContributorViewBinder.java",
      "language": "JAVA",
      "line": 82,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 80,
        "length": 15,
        "offset": 136,
        "surroundingCode": "                    v.getContext().startActivity(intent);\n                } catch (ActivityNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "402145d749ecce2d8df344e0fc10e468633296ff6e05dd90bd33b0a548e5c63a"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/recycleview/simplepage/ClickableItemViewBinder.java",
      "language": "JAVA",
      "line": 72,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 70,
        "length": 15,
        "offset": 136,
        "surroundingCode": "                    v.getContext().startActivity(intent);\n                } catch (ActivityNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "03d2bf2e718a941cdeb29494051865f5eda29ad484ecdd6796faa0e0125fd3b5"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/recycleview/SimplePageActivity.java",
      "language": "JAVA",
      "line": 75,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 73,
        "length": 15,
        "offset": 83,
        "surroundingCode": "                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "1204c5bd341c31056685aa821f0f0c675bffa55536a3918940c8ff0f04c9f6ca"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getFileSize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/FileUtils.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 38,
        "length": 11,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun getFileSize(path: String): Long {\n        return runCatching {\n            Files.size(Paths.get(path))"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6783a9ca67ca5ca60049161152e800579b699b1943b34e6b4c5d2821477b7863"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 589,
      "offset": 43,
      "length": 6,
      "code": {
        "startLine": 587,
        "length": 6,
        "offset": 208,
        "surroundingCode": "        byte[][] firstKeyBt = new byte[0][], secondKeyBt = new byte[0][], thirdKeyBt = new byte[0][];\n        int firstLength = 0, secondLength = 0, thirdLength = 0;\n        if (firstKey != null && !firstKey.equals(\"\")) {\n            firstKeyBt = getKeyBytes(firstKey);\n            firstLength = firstKeyBt.length;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "f686dc243dbd19a0776f71edc869daa73a790047b3d0650d10958e76516b054c"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 593,
      "offset": 45,
      "length": 6,
      "code": {
        "startLine": 591,
        "length": 6,
        "offset": 99,
        "surroundingCode": "            firstLength = firstKeyBt.length;\n        }\n        if (secondKey != null && !secondKey.equals(\"\")) {\n            secondKeyBt = getKeyBytes(secondKey);\n            secondLength = secondKeyBt.length;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "8e054f91023550d4e8cf6f5fe99baed8cdf0f59e4ce3701524472bcb805fdd2a"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 597,
      "offset": 43,
      "length": 6,
      "code": {
        "startLine": 595,
        "length": 6,
        "offset": 99,
        "surroundingCode": "            secondLength = secondKeyBt.length;\n        }\n        if (thirdKey != null && !thirdKey.equals(\"\")) {\n            thirdKeyBt = getKeyBytes(thirdKey);\n            thirdLength = thirdKeyBt.length;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "8a87d4d7ece4b99a906e1081d47755360e09d7a5b88083c3d335a61f37bb2385"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 603,
      "offset": 55,
      "length": 6,
      "code": {
        "startLine": 601,
        "length": 6,
        "offset": 81,
        "surroundingCode": "\n        if (length > 0) {\n            boolean b = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\") && thirdKey != null && !thirdKey.equals(\"\");\n            boolean b1 = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\");\n            if (length < 4) {"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "a38549e5b622e186c2fd63c99497b2eebaca7449083687ced6f08e3cfb11b6b3"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 603,
      "offset": 101,
      "length": 6,
      "code": {
        "startLine": 601,
        "length": 6,
        "offset": 127,
        "surroundingCode": "\n        if (length > 0) {\n            boolean b = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\") && thirdKey != null && !thirdKey.equals(\"\");\n            boolean b1 = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\");\n            if (length < 4) {"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "1231be4fd01f6944e3facb0f964917b673f6b456611c84806c132ff3e02c1582"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 603,
      "offset": 145,
      "length": 6,
      "code": {
        "startLine": 601,
        "length": 6,
        "offset": 171,
        "surroundingCode": "\n        if (length > 0) {\n            boolean b = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\") && thirdKey != null && !thirdKey.equals(\"\");\n            boolean b1 = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\");\n            if (length < 4) {"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "d7db54e9a99b4fcad477ca9c9f0039be54c707b7e1e846047cf5ed9935f90836"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 604,
      "offset": 56,
      "length": 6,
      "code": {
        "startLine": 602,
        "length": 6,
        "offset": 237,
        "surroundingCode": "        if (length > 0) {\n            boolean b = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\") && thirdKey != null && !thirdKey.equals(\"\");\n            boolean b1 = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\");\n            if (length < 4) {\n                byte[] bt = strToBt(data);"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "8dbaf5be642ca939128a64b20054f012ba52f1b2fe927b6479e02e39e62012fb"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 604,
      "offset": 102,
      "length": 6,
      "code": {
        "startLine": 602,
        "length": 6,
        "offset": 283,
        "surroundingCode": "        if (length > 0) {\n            boolean b = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\") && thirdKey != null && !thirdKey.equals(\"\");\n            boolean b1 = firstKey != null && !firstKey.equals(\"\") && secondKey != null && !secondKey.equals(\"\");\n            if (length < 4) {\n                byte[] bt = strToBt(data);"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "aee881de539f916e9b4c5fa8b371c8b371e3cd000abf339d6b73b51cbafb6644"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 635,
      "offset": 59,
      "length": 6,
      "code": {
        "startLine": 633,
        "length": 6,
        "offset": 129,
        "surroundingCode": "                        encByte = tempBt;\n                    } else {\n                        if (firstKey != null && !firstKey.equals(\"\")) {\n                            byte[] tempBt;\n                            int x;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "ff272d7141c11af7487c55182be6b0b78f225a8bc555631e2ca12323e7d4fb98"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 682,
      "offset": 63,
      "length": 6,
      "code": {
        "startLine": 680,
        "length": 6,
        "offset": 141,
        "surroundingCode": "                            encByte = tempBt;\n                        } else {\n                            if (firstKey != null && !firstKey.equals(\"\")) {\n                                byte[] tempBt;\n                                int x;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "1f746bf807278fe441a602e9d532f7bc72de9c96f8b891f934f97777147da1d4"
},{
  "tool": "Code Inspection",
  "category": "Performance",
  "type": "'String.equals()' can be replaced with 'String.isEmpty()'",
  "severity": "High",
  "comment": "'equals(\"\")' can be replaced with 'isEmpty()'",
  "detailsInfo": "Reports `equals()` being called to compare a `String` with an empty string. In this case, using `.isEmpty()` is better as it shows you exactly what you're checking.\n\n**Example:**\n\n\n      void checkString(String s){\n        if (\"\".equals(s)) throw new IllegalArgumentException();\n      }\n\nAfter the quick-fix is applied:\n\n\n      void checkString(String s){\n        if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n      }\n\n\n`\"\".equals(str)` returns false when `str` is null. For safety, this inspection's quick-fix inserts an explicit\nnull-check when\nthe `equals()` argument is nullable. Use the option to make the inspection ignore such cases.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/utils/des/DesEncryptUtils.java",
      "language": "JAVA",
      "line": 726,
      "offset": 63,
      "length": 6,
      "code": {
        "startLine": 724,
        "length": 6,
        "offset": 141,
        "surroundingCode": "                            encByte = tempBt;\n                        } else {\n                            if (firstKey != null && !firstKey.equals(\"\")) {\n                                byte[] tempBt;\n                                int x;"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "StringEqualsEmptyString"
  },
  "hash": "0866d09767c1400952d76163665268862d4c9158025c80287f7c398e57133c47"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant diagnostic suppression",
  "severity": "High",
  "comment": "Redundant suppression",
  "detailsInfo": "Reports usages of `@Suppress` annotations that can be safely removed because the compiler diagnostic they affect is no longer applicable in this context.\n\n**Example:**\n\n\n      fun doSmth(@Suppress(\"UNUSED_PARAMETER\") used: Int) {\n        println(used)\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun doSmth(used: Int) {\n        println(used)\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/java/com/qhy040404/libraryonetap/base/BaseActivity.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 13,
        "length": 11,
        "offset": 55,
        "surroundingCode": "import rikka.material.app.MaterialActivity\n\n@Suppress(\"DEPRECATION\")\nabstract class BaseActivity<VB : ViewBinding> : MaterialActivity() {\n"
      }
    }
  ],
  "attributes": {
    "module": "图书馆.app.main",
    "inspectionName": "KotlinRedundantDiagnosticSuppress"
  },
  "hash": "f6e91edcb72c3be4014f4d6431d7fb19e11077eacdb528cc584180fc9b9215f7"
}]}