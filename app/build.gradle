plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

private static String baseVersionName() {
    return "3.3.0"
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.qhy040404.libraryonetap"
        minSdk 29
        targetSdk 33
        versionCode getCommitsCount()
        versionName baseVersionName()

        project.archivesBaseName = "Library-One-Tap_v$versionName"
        manifestPlaceholders = [CHANNEL: getBuildType(), BUILD_TIME: getBuildTime(), BUILD_HOST: getBuildHost(), COMMIT: getGitCommitHash()]
    }

    buildTypes {
        debug {
            applicationIdSuffix = ".debug"
        }

        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilter 'arm64-v8a'
            }
        }

        all {
            buildConfigField("String", "CHANNEL", "\"${getBuildType()}\"")
            buildConfigField("String", "BUGLY_APPID", "\"${getBuglyAppID()}\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

configurations.all {
    exclude group: 'androidx.appcompat', module: 'appcompat'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.core:core-splashscreen:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'com.drakeet.about:about:2.5.1'
    implementation 'com.drakeet.multitype:multitype:4.3.0'
    implementation 'com.github.zhaobozhen.libraries:utils:1.1.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'com.squareup.moshi:moshi-kotlin:1.13.0'
    implementation 'com.squareup.okio:okio:3.2.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.tencent.bugly:crashreport:4.0.4'
    implementation 'dev.rikka.rikkax.appcompat:appcompat:1.5.0'
    implementation 'dev.rikka.rikkax.material:material:2.5.1'
    implementation 'dev.rikka.rikkax.material:material-preference:2.0.0'
    implementation 'dev.rikka.rikkax.preference:simplemenu-preference:1.0.3'
    implementation 'dev.rikka.rikkax.recyclerview:recyclerview-ktx:1.3.1'
    implementation 'dev.rikka.rikkax.widget:borderview:1.1.0'
    implementation 'io.coil-kt:coil:2.1.0'
    implementation 'me.zhanghai.android.appiconloader:appiconloader:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    testImplementation 'junit:junit:4.13.2'
}

import java.text.SimpleDateFormat

private static String getBuglyAppID() {
    return System.getenv("BUGLY_APPID")
}

private static String getBuildTime() {
    Date date = new Date()
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    formatter.setTimeZone(TimeZone.getTimeZone("GMT+08:00"))
    return formatter.format(date)
}

private static String getBuildType() {
    if (execute(String.format("git tag -l %s", baseVersionName())) != null) {
        return "Release"
    } else if (execute(String.format("git tag -l %s-Pre", baseVersionName())) != null) {
        return "Pre-release"
    } else {
        return "Debug"
    }
}

private static String getBuildHost() {
    return InetAddress.getLocalHost().getHostName()
}

private static String getGitCommitHash() {
    return execute("git rev-parse HEAD")
}

private static int getCommitsCount() {
    return Integer.parseInt(execute("git rev-list --count HEAD"))
}

private static String execute(String param) {
    Runtime runtime = Runtime.getRuntime()
    Process process = null
    try {
        process = runtime.exec(param)
        String line
        BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()))
        while ((line = input.readLine()) != null) {
            if (process != null) {
                process.destroy()
            }
            return line
        }
    } catch (Exception e) {
        e.printStackTrace()
    } finally {
        if (process != null) {
            process.destroy()
        }
    }
}